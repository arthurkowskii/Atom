---
export interface Props { data: any }
const { data } = Astro.props;
import LogoAbleton from '../Assets/software_logos/Ableton.webp';
import LogoReaper from '../Assets/software_logos/Reaper.webp';
import LogoLogicPro from '../Assets/software_logos/Logic_Pro.webp';
import LogoProTools from '../Assets/software_logos/Pro_Tools.webp';
import LogoFMOD from '../Assets/software_logos/Fmod.webp';
import LogoWwise from '../Assets/software_logos/Wwise.webp';
import LogoUnity from '../Assets/software_logos/Unity.webp';
import LogoCsharp from '../Assets/software_logos/Csharp.webp';
import LogoGit from '../Assets/software_logos/Git.webp';
import LogoDavinci from '../Assets/software_logos/Davinci_Resolve.webp';
import LogoCinema4D from '../Assets/software_logos/Cinema_4D.webp';
import LogoPhotoshop from '../Assets/software_logos/photoshop.webp';

// In Astro, importing images returns an object with a `src` property.
// Use `any` and normalize to a string at render time.
const RAW_LOGOS: Record<string, any> = {
  ableton: LogoAbleton,
  reaper: LogoReaper,
  logicpro: LogoLogicPro,
  protools: LogoProTools,
  fmod: LogoFMOD,
  wwise: LogoWwise,
  unity: LogoUnity,
  csharp: LogoCsharp,
  git: LogoGit,
  davinciresolve: LogoDavinci,
  cinema4d: LogoCinema4D,
  photoshop: LogoPhotoshop,
};

function normLabel(label: string): string {
  const s = (label || '').toLowerCase().replace(/#/g, 'sharp').replace(/[^a-z0-9]+/g, '');
  return s;
}

function logoSrcFor(label: string): string | null {
  const key = normLabel(label);
  const val = RAW_LOGOS[key];
  if (!val) return null;
  return typeof val === 'string' ? val : (val?.src ?? null);
}
---

<style>
  :root { color-scheme: light; }
  .frame { min-height: 100%; display: grid; place-items: center; }
  .wrap { width: min(100%, 960px); padding: 56px 24px; }
  .row { display: grid; grid-template-columns: 1fr 0.9fr; gap: 40px; align-items: center; }
  .name { font-size: 72px; letter-spacing: 8px; font-weight: 700; font-style: italic; line-height: 1.04; margin: 0 0 8px; text-transform: uppercase; color: #000; }
  .subtitle { font-size: 12px; text-transform: uppercase; letter-spacing: 3px; margin: 0 0 20px; color: #000; }
  .lead { font-size: 20px; line-height: 1.6; color: #000; }
  .portrait { width: 100%; max-width: 400px; object-fit: cover; justify-self: end; border: 1px solid #000; border-radius: 12px; }
  .divider { height: 1px; background: #000; margin: 40px 0; }
  .label { font-size: 12px; letter-spacing: 2px; text-transform: uppercase; margin: 0 0 12px; color: #000; }
  .chips { display: flex; flex-wrap: wrap; gap: 8px; }
  .chip { display: inline-flex; align-items: center; gap: 6px; border: 1px solid #000; border-radius: 6px; padding: 4px 10px; font-size: 12px; background: #fff; color: #000; }
  .chip img { display: inline-block; width: 16px; height: 16px; object-fit: contain; flex-shrink: 0; }
  .skills { display: grid; grid-template-columns: repeat(3, minmax(0,1fr)); gap: 24px; }
  /* Category cards: white background with black border */
  .skill { padding: 18px; border: 2px solid #000; border-radius: 12px; background: #fff; color: #000; }
  .skill h3 { margin: 0 0 10px; font-size: 12px; letter-spacing: 1px; text-transform: uppercase; color: #000; }
  /* Competence chips: white by default; no hover inversion */
  .skills .chip { background: #fff; color: #000; border-color: #000; }
  /* Force logos to black on white chips for consistency */
  .skills .chip img { filter: grayscale(1) brightness(0) contrast(100%); }
  .footer { display: flex; justify-content: space-between; align-items: baseline; flex-wrap: wrap; gap: 16px; }
  .email { border-bottom: 2px solid #000; padding-bottom: 2px; color: #000; text-decoration: none; }
  .email:hover { background: #000; color: #fff; padding: 2px 6px; border-bottom-color: transparent; }
  @media (max-width: 980px) { .row { grid-template-columns: 1fr; } .portrait { justify-self: start; max-width: 340px; } .skills { grid-template-columns: repeat(2, minmax(0,1fr)); } }

  /* Dark theme overrides */
  html[data-theme="dark"] .name,
  html[data-theme="dark"] .subtitle,
  html[data-theme="dark"] .lead,
  html[data-theme="dark"] .label,
  html[data-theme="dark"] .skill h3 { color: #fff; }
  html[data-theme="dark"] .portrait { border-color: #fff; }
  html[data-theme="dark"] .divider { background: #fff; }
  html[data-theme="dark"] .chip { background: transparent; color: #fff; border-color: #fff; }
  html[data-theme="dark"] .skills .chip img { filter: invert(1) brightness(1.2); }
  html[data-theme="dark"] .skill { background: #000; color: #fff; border-color: #fff; }
  html[data-theme="dark"] .email { color: #fff; border-bottom-color: #fff; }
  html[data-theme="dark"] .email:hover { background: #fff; color: #000; }
</style>

<section class="frame" aria-label="Bio">
  <div class="wrap">
    <div class="row">
      <div>
        <h1 id="bio-bw-name" class="name">{String(data?.title || '').toUpperCase()}</h1>
        <p id="bio-bw-subtitle" class="subtitle">{String(data?.subtitle || '').toUpperCase()}</p>
        <div id="bio-bw-lead" class="lead" set:html={data?.bio || ''}></div>
      </div>
      {data?.portrait ? (<img id="bio-bw-portrait" class="portrait" src={data.portrait} alt={data.title || 'Portrait'} />) : null}
    </div>

    <div class="divider"></div>

    <section aria-labelledby="bio-bw-skills-label">
      <div id="bio-bw-skills-label" class="label">Skills</div>
      <div id="bio-bw-skills" class="skills">
        {(data?.skills || []).map((cat: any) => (
          <div class="skill bio-bw-skill">
            <h3>{cat.category}</h3>
            <div class="chips">
              {(cat.tools || []).map((t: string) => {
                const src = logoSrcFor(t);
                return (
                  <span class="chip bio-bw-chip">{src ? (<img src={src} alt="" aria-hidden="true" />) : null}{t}</span>
                );
              })}
            </div>
          </div>
        ))}
      </div>
    </section>

    <div class="divider"></div>

    <section class="footer" aria-label="Contact and Social">
      <div>
        <div class="label">Contact</div>
        {data?.email ? (<a id="bio-bw-email" class="email bio-bw-email" href={`mailto:${data.email}`}>{data.email}</a>) : null}
      </div>
      <div>
        <div class="label">Social</div>
        <div id="bio-bw-social" class="chips bio-bw-chips">
          {(data?.social || []).map((s: any) => (<a class="chip bio-bw-chip" href={s.url} target="_blank" rel="noreferrer noopener">{s.platform}</a>))}
        </div>
      </div>
    </section>
  </div>
  
</section>
