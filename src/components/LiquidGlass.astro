---
// LiquidGlass Astro Component - Apple-style liquid glass with refraction effects
export interface Props {
  class?: string;
  style?: string;
  displacementScale?: number;
  blurAmount?: number;
  saturation?: number;
  aberrationIntensity?: number;
  elasticity?: number;
  cornerRadius?: number;
  padding?: string;
  overLight?: boolean;
  mode?: 'standard' | 'polar' | 'prominent' | 'shader';
  enabled?: boolean;
}

// Force fresh import by using dynamic import to avoid caching issues
const { default: atomConfig } = await import('../atom.config.js');

const {
  class: className = '',
  style = '',
  displacementScale = 70,
  blurAmount = 0.0625,
  saturation = 140,
  aberrationIntensity = 2,
  elasticity = 0.15,
  cornerRadius = 16,
  padding = '16px',
  overLight = false,
  mode = 'standard',
  enabled = true
} = Astro.props;

// Get global liquid glass config if available
const liquidGlassConfig = (atomConfig as any).liquidGlass || {};

// Debug: log the loaded config - this should appear in console but doesn't in your logs!
console.log('ðŸ”® LiquidGlass.astro config loaded:', {
  atomConfig: atomConfig,
  liquidGlassConfig,
  hasLiquidGlass: !!(atomConfig as any).liquidGlass,
  blurAmount: liquidGlassConfig.blurAmount,
  displacementScale: liquidGlassConfig.displacementScale,
  noBorders: liquidGlassConfig.noBorders,
  fallbackToBackdrop: liquidGlassConfig.fallbackToBackdrop,
  // Add direct check of what atomConfig contains
  atomConfigRaw: JSON.stringify(atomConfig, null, 2)
});

// Merge props with global config (props take precedence)
const finalOptions = {
  displacementScale: displacementScale ?? liquidGlassConfig.displacementScale ?? 70,
  blurAmount: blurAmount ?? liquidGlassConfig.blurAmount ?? 0.0625,
  saturation: saturation ?? liquidGlassConfig.saturation ?? 140,
  aberrationIntensity: aberrationIntensity ?? liquidGlassConfig.aberrationIntensity ?? 2,
  elasticity: elasticity ?? liquidGlassConfig.elasticity ?? 0.15,
  cornerRadius: cornerRadius ?? liquidGlassConfig.cornerRadius ?? 16,
  padding: padding ?? liquidGlassConfig.padding ?? '16px',
  overLight: overLight ?? liquidGlassConfig.overLight ?? false,
  mode: mode ?? liquidGlassConfig.mode ?? 'standard',
  enabled: enabled ?? liquidGlassConfig.enabled ?? true,
  // Include all missing options from liquidGlassConfig
  noBorders: liquidGlassConfig.noBorders ?? false,
  mouseActivationZone: liquidGlassConfig.mouseActivationZone ?? 200,
  enableShaderMode: liquidGlassConfig.enableShaderMode ?? false,
  fallbackToBackdrop: liquidGlassConfig.fallbackToBackdrop ?? true,
  respectReducedMotion: liquidGlassConfig.respectReducedMotion ?? true,
  initializeOnHover: liquidGlassConfig.initializeOnHover ?? false,
  destroyOnLeave: liquidGlassConfig.destroyOnLeave ?? false,
  showFallbackIndicator: liquidGlassConfig.showFallbackIndicator ?? false
};

// Generate unique ID for this instance
const instanceId = `liquid-glass-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  id={instanceId}
  class={`liquid-glass-wrapper ${className}`}
  style={style}
  data-liquid-glass-options={JSON.stringify(finalOptions)}
>
  <div class="liquid-glass-original-content" style="display: contents;">
    <slot />
  </div>
</div>

<script>
  console.log('ðŸ”® LiquidGlass.astro client script loading...');
  import { LiquidGlass } from '../liquid-glass/LiquidGlass.js';

  // Initialize liquid glass on all components
  function initializeLiquidGlass() {
    const wrappers = document.querySelectorAll('.liquid-glass-wrapper[data-liquid-glass-options]');
    
    wrappers.forEach((wrapper) => {
      // Skip if already initialized
      if (wrapper.hasAttribute('data-liquid-glass-initialized')) return;
      
      const optionsAttr = wrapper.getAttribute('data-liquid-glass-options');
      if (!optionsAttr) return;
      
      try {
        const options = JSON.parse(optionsAttr);
        
        // Only initialize if enabled and browser supports required features
        if (options.enabled) {
          // Get the original content from the wrapped element
          const originalContentElement = wrapper.querySelector('.liquid-glass-original-content');
          const originalContent = originalContentElement ? originalContentElement.innerHTML : wrapper.innerHTML;
          
          console.log('ðŸ”® Liquid glass content:', { 
            hasOriginalElement: !!originalContentElement,
            content: originalContent
          });
          
          // Store content in data attribute for the LiquidGlass class
          wrapper.setAttribute('data-original-content', originalContent);
          
          const liquidGlass = new LiquidGlass(wrapper, options);
          
          // Store reference for cleanup if needed
          (wrapper as any)._liquidGlassInstance = liquidGlass;
          wrapper.setAttribute('data-liquid-glass-initialized', 'true');
          
          console.log('ðŸ”® Liquid glass initialized:', wrapper.id || 'unnamed');
        }
      } catch (error) {
        console.warn('Failed to initialize liquid glass:', error);
        
        // Fallback: add a simple frosted glass class
        wrapper.classList.add('liquid-glass-fallback');
      }
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLiquidGlass);
  } else {
    // DOM already loaded
    initializeLiquidGlass();
  }

  // Re-initialize when new content is added (for overlay transitions)
  document.addEventListener('liquid-glass:reinit', initializeLiquidGlass);

  // Cleanup function for page navigation
  document.addEventListener('liquid-glass:cleanup', () => {
    const wrappers = document.querySelectorAll('.liquid-glass-wrapper[data-liquid-glass-initialized]');
    wrappers.forEach((wrapper) => {
      const instance = (wrapper as any)._liquidGlassInstance;
      if (instance && typeof instance.destroy === 'function') {
        instance.destroy();
        delete (wrapper as any)._liquidGlassInstance;
        wrapper.removeAttribute('data-liquid-glass-initialized');
      }
    });
  });
</script>

<style>
  .liquid-glass-wrapper {
    /* Base styles for the wrapper */
    display: inline-block;
    position: relative;
  }

  /* Enhanced fallback styles for browsers that don't support SVG filters */
  .liquid-glass-fallback {
    background: rgba(255, 255, 255, 0.18) !important;
    backdrop-filter: blur(16px) saturate(140%) !important;
    border: 1px solid rgba(255, 255, 255, 0.5) !important;
    border-radius: 16px !important;
    padding: 16px !important;
    box-shadow: 0px 12px 40px rgba(0, 0, 0, 0.25) !important;
    transition: all 0.2s ease-in-out !important;
    overflow: hidden !important;
    position: relative !important;
  }

  .liquid-glass-fallback::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    background: radial-gradient(120% 60% at 10% 0%, rgba(255,255,255,0.25), transparent 60%);
    mix-blend-mode: screen;
    pointer-events: none;
  }

  .liquid-glass-fallback:hover {
    backdrop-filter: blur(20px) saturate(160%) !important;
    box-shadow: 0px 16px 60px rgba(0, 0, 0, 0.35) !important;
    transform: translateY(-1px);
  }

  /* Support for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .liquid-glass-wrapper,
    .liquid-glass-fallback {
      transition: none !important;
    }
    
    .liquid-glass-wrapper * {
      transform: none !important;
      transition: none !important;
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .liquid-glass-fallback {
      background: rgba(0, 0, 0, 0.3) !important;
      border: 1px solid rgba(255, 255, 255, 0.2) !important;
      box-shadow: 0px 12px 40px rgba(0, 0, 0, 0.6) !important;
    }
  }

  /* Ensure text stays readable in all contexts */
  .liquid-glass-wrapper,
  .liquid-glass-fallback {
    color: inherit;
  }

  .liquid-glass-wrapper *,
  .liquid-glass-fallback * {
    position: relative;
    z-index: 1;
  }
</style>