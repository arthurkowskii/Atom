---
// Bento Grid project template - modern, content-focused layout
export interface Props {
  project: {
    data: {
      title: string;
      description: string;
      tech: string[];
      link?: string;
      github?: string;
      bento?: {
        cards?: {
          hero?: boolean;
          stats?: boolean;
          actions?: boolean;
          tech?: boolean;
          process?: boolean;
          gallery?: boolean;
          challenges?: boolean;
          results?: boolean;
        };
        accentColor?: string;
        hero?: {
          subtitle?: string;
          subtitleColor?: string;
          backgroundImage?: string;
          backgroundPosition?: string;
          backgroundSize?: string;
          backgroundScale?: number;
          logo?: string;
          showLogo?: boolean;
        };
        stats?: Array<{ value: string; label: string; }>;
        actions?: {
          title?: string;
          primary?: { text: string; url: string; };
          secondary?: { text: string; url?: string; };
        };
        process?: {
          title?: string;
          subtitle?: string;
          steps: string[];
        };
        gallery?: {
          title?: string;
          images: Array<{ src: string; alt: string; }>;
        };
        challenges?: {
          title?: string;
          subtitle?: string;
          items: Array<{ title: string; description: string; }>;
        };
        results?: {
          title?: string;
          subtitle?: string;
          items: Array<{ icon: string; text: string; }>;
        };
        musicLinks?: {
          title?: string;
          items: Array<{ text: string; url: string; }>;
        };
      };
    };
  };
}

import atomConfig from '../atom.config.js';
// Music links icons (static imports). Folder name contains a space; keep as-is.
import spotifyIcon from '../Assets/music_links assets/spotify.png?url';
import appleMusicIcon from '../Assets/music_links assets/apple_music.png?url';
import bandcampIcon from '../Assets/music_links assets/bandcamp-logo.png?url';
import youtubeIcon from '../Assets/music_links assets/youtube.png?url';
import soundcloudIcon from '../Assets/music_links assets/soundcloud.png?url';

const { project } = Astro.props;

// Handle case where no project is passed (for preview pages)
if (!project || !project.data) {
  throw new Error('ProjectBento component requires a project prop with data');
}

const { data } = project;

// Bento configuration with defaults
const bento = data.bento || {};
const cards = { 
  hero: true, 
  stats: true, 
  musicLinks: false,
  actions: true, 
  tech: true, 
  process: true, 
  gallery: true, 
  challenges: true, 
  results: true,
  ...bento.cards 
};
const accentColor = bento.accentColor || '#ff6b00';
// Compute lightness to guard against low-contrast accent-on-white text
function hexToRgb(hex) {
  const h = hex.replace('#', '').slice(0, 6);
  const m = h.match(/.{2}/g);
  if (!m) return { r: 0, g: 0, b: 0 };
  return { r: parseInt(m[0], 16), g: parseInt(m[1], 16), b: parseInt(m[2], 16) };
}
function relativeLuminance({ r, g, b }) {
  const srgb = [r, g, b].map(v => v / 255);
  const lin = srgb.map(v => (v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)));
  return 0.2126 * lin[0] + 0.7152 * lin[1] + 0.0722 * lin[2];
}
const accentRgbObj = hexToRgb(accentColor);
const accentLum = relativeLuminance(accentRgbObj);
const isLightAccent = accentLum > 0.7; // high-luminance accents (e.g., neon yellows)
// Subtitle text color: prefer black when accent is too light to ensure readability
const heroSubtitleColor = isLightAccent ? '#000000' : (bento.hero?.subtitleColor || accentColor);

// Music Links availability: only render when exactly 4 links provided
const hasMusicLinks = !!(cards.musicLinks && bento.musicLinks && Array.isArray(bento.musicLinks.items) && bento.musicLinks.items.length === 4);
if (cards.musicLinks && !hasMusicLinks) {
  console.warn('[ProjectBento] musicLinks card enabled but missing 4 items; falling back to Stats card.');
}

// Icon mapping and platform inference for Music Links
const MUSIC_ICONS: Record<string, any> = {
  spotify: spotifyIcon,
  applemusic: appleMusicIcon,
  apple: appleMusicIcon,
  bandcamp: bandcampIcon,
  youtube: youtubeIcon,
  soundcloud: soundcloudIcon,
};

function normalizeKey(s?: string): string {
  return (s || '').toLowerCase().replace(/[^a-z]/g, '');
}

function inferPlatform(text?: string, url?: string): string {
  const t = normalizeKey(text);
  if (t && MUSIC_ICONS[t]) return t;
  const u = (url || '').toLowerCase();
  if (u.includes('spotify')) return 'spotify';
  if (u.includes('apple') || u.includes('music.apple')) return 'applemusic';
  if (u.includes('bandcamp')) return 'bandcamp';
  if (u.includes('youtube') || u.includes('youtu.be')) return 'youtube';
  if (u.includes('soundcloud')) return 'soundcloud';
  return '';
}

// Build gallery and hero assets automatically from a folder when provided
type Img = { src: string; alt: string };
function humanize(name: string): string {
  const base = name.replace(/[-_]+/g, ' ').replace(/\s+/g, ' ').trim();
  return base.charAt(0).toUpperCase() + base.slice(1);
}

// Eagerly glob project images and get resolved asset URLs (works in dev/build)
// Note: use query '?url' + import 'default' (Vite deprecation of `as: 'url'`)
const ALL_ASSET_URLS = import.meta.glob('/src/content/projects/**/*.{jpg,jpeg,png,webp,gif}', {
  eager: true,
  query: '?url',
  import: 'default'
}) as Record<string,string>;

function resolveAssetUrl(raw?: string): string | undefined {
  if (!raw) return undefined;
  let key = raw.replace(/\\/g, '/');
  if (!key.startsWith('/')) key = '/' + key;
  if (ALL_ASSET_URLS[key]) return ALL_ASSET_URLS[key];
  const noLead = key.slice(1);
  if (ALL_ASSET_URLS[noLead]) return ALL_ASSET_URLS[noLead];
  return undefined;
}

function scanAssetsFolder(folder: string | undefined, explicitHeroBg?: string, explicitLogo?: string): {
  heroBg?: string,
  heroLogo?: string,
  images: Img[]
} {
  if (!folder) return { images: [] };
  // Normalize folder to POSIX-style with leading slash and no trailing slash
  let norm = folder.replace(/\\/g, '/');
  if (!norm.startsWith('/')) norm = '/' + norm;
  if (norm.endsWith('/')) norm = norm.slice(0, -1);

  // Collect all files under the folder from the glob map
  const entries = Object.entries(ALL_ASSET_URLS)
    .filter(([p]) => p.startsWith(norm + '/'))
    .map(([p, url]) => ({ path: p, url }));

  // Separate hero/logo and gallery
  const parts = entries.map(({ path, url }) => {
    const base = path.split('/').pop() || '';
    const name = base.replace(/\.[^.]+$/, '');
    const nameLC = name.toLowerCase();
    return { base, name, nameLC, url };
  });

  const heroFile = parts.find(p => p.nameLC === 'hero');
  const logoFile = parts.find(p => p.nameLC === 'logo');
  const heroBg = resolveAssetUrl(explicitHeroBg) || heroFile?.url;
  const heroLogo = resolveAssetUrl(explicitLogo) || logoFile?.url;

  // Reserved names to exclude from gallery
  const reserved = new Set<string>(['hero', 'logo']);
  if (explicitHeroBg) reserved.add((explicitHeroBg.split('/').pop() || '').replace(/\.[^.]+$/, '').toLowerCase());
  if (explicitLogo) reserved.add((explicitLogo.split('/').pop() || '').replace(/\.[^.]+$/, '').toLowerCase());

  const images = parts
    .filter(p => !reserved.has(p.nameLC))
    .sort((a, b) => a.base.localeCompare(b.base, undefined, { numeric: true, sensitivity: 'base' }))
    .map(p => ({ src: p.url, alt: humanize(p.name) }));

  return { heroBg, heroLogo, images };
}

const explicitHeroBg = bento.hero?.backgroundImage;
const explicitLogo = bento.hero?.logo;
const assets = scanAssetsFolder(bento.assetsFolder, explicitHeroBg, explicitLogo);

// Final hero URLs prefer explicit values; fall back to auto-detected files
const heroBackgroundUrl = explicitHeroBg || assets.heroBg;
const heroLogoUrl = explicitLogo || assets.heroLogo;

// Final gallery prefers explicit config when present; otherwise auto
const configuredImages: Img[] | undefined = bento.gallery?.images as any;
const galleryImages: Img[] = (configuredImages && configuredImages.length > 0)
  ? configuredImages.map(img => ({ src: resolveAssetUrl(img.src) || img.src, alt: img.alt }))
  : assets.images;

// Fallback: if no explicit or auto hero image, use first gallery image
const finalHeroUrl = heroBackgroundUrl || (galleryImages[0]?.src);

// Hero background styling with customizable positioning and sizing
const heroBackgroundPosition = bento.hero?.backgroundPosition || 'center';
const heroBackgroundScale = bento.hero?.backgroundScale;
const heroBackgroundSize = heroBackgroundScale ? 
  `${heroBackgroundScale * 100}%` : 
  (bento.hero?.backgroundSize || 'cover');

const heroStyle = finalHeroUrl ? 
  `background-image: linear-gradient(to bottom, rgba(0,0,0,0.1), rgba(0,0,0,0.35)), url('${finalHeroUrl}'); background-position: ${heroBackgroundPosition}; background-size: ${heroBackgroundSize};` : 
  '';

// Generate CSS custom properties for the accent color
// Handle both 6-char (#ff6b00) and 8-char (#dfdb00ff) hex colors
const cleanHex = accentColor.replace('#', '');
const hexRgb = cleanHex.length === 8 ? cleanHex.slice(0, 6) : cleanHex; // Remove alpha if present
const accentColorRgb = hexRgb.match(/.{2}/g)?.map(hex => parseInt(hex, 16)).join(', ') || '255, 107, 0';
---

<style define:vars={{ accentColor, accentColorRgb, heroSubtitleColor }}>
  .project-bento {
    min-height: 100vh;
    background: #ffffff !important;
    color: #000000;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    padding-top: 4rem; /* Space for close button */
    padding-bottom: 2rem; /* Ensure space for scrolling */
    
    /* CSS custom properties for accent color theming */
    --accent-color: var(--accentColor);
    --accent-color-rgb: var(--accentColorRgb);
    /* Derived roles */
    --accent-bg-weak: rgba(var(--accent-color-rgb), 0.10);
    --accent-bg-weak-hover: rgba(var(--accent-color-rgb), 0.16);
    --accent-border: rgba(var(--accent-color-rgb), 0.28);
    --on-accent: #000000; /* default readable on both yellow/orange */
  }

  /* Professional dark theme for project pages */
  html[data-theme="dark"] .project-bento {
    background: #0f0f0f !important;
    color: #e4e4e7;
  }

  /* Dark theme bento cards */
  html[data-theme="dark"] .bento-card {
    background: #1a1a1a;
    border: 2px solid #2a2a2a;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
    color: #e4e4e7;
  }

  html[data-theme="dark"] .bento-card:hover,
  html[data-theme="dark"] .bento-card:focus {
    border-color: rgba(var(--accent-color-rgb), 0.6);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.6);
  }

  /* Dark theme card titles and text */
  html[data-theme="dark"] .card-title {
    color: #f4f4f5;
  }

  html[data-theme="dark"] .card-subtitle {
    color: #a1a1aa;
  }

  html[data-theme="dark"] .hero-title {
    color: #ffffff;
    text-shadow: 0 2px 15px rgba(0,0,0,0.9);
  }

  html[data-theme="dark"] .hero-description {
    color: #f4f4f5;
  }

  /* Dark theme stats */
  html[data-theme="dark"] .stat-item {
    background: rgba(var(--accent-color-rgb), 0.15);
    border: 1px solid rgba(var(--accent-color-rgb), 0.3);
  }

  /* Dark theme music link buttons */
  html[data-theme="dark"] .music-link-btn {
    background: rgba(var(--accent-color-rgb), 0.15);
    border: 1px solid rgba(var(--accent-color-rgb), 0.3);
    color: #f4f4f5;
  }

  html[data-theme="dark"] .music-link-btn:hover {
    background: rgba(var(--accent-color-rgb), 0.25);
    box-shadow: 0 4px 12px rgba(var(--accent-color-rgb), 0.3);
  }

  html[data-theme="dark"] .music-link-text {
    color: #f4f4f5;
  }

  /* Dark mode: invert Bandcamp icon only (to ensure visibility on dark bg) */
  html[data-theme="dark"] .music-link-btn[data-platform="bandcamp"] img {
    filter: brightness(0) invert(1);
  }

  html[data-theme="dark"] .stat-value {
    color: #f4f4f5;
  }

  html[data-theme="dark"] .stat-label {
    color: #a1a1aa;
  }

  /* Dark theme action buttons */
  html[data-theme="dark"] .action-btn.primary {
    background: linear-gradient(135deg, var(--accent-color) 0%, var(--accent-color) 100%);
    color: var(--on-accent);
    border: 1px solid rgba(255,255,255,0.1);
  }

  html[data-theme="dark"] .action-btn.secondary {
    background: rgba(var(--accent-color-rgb), 0.15);
    color: #f4f4f5;
    border: 2px solid rgba(var(--accent-color-rgb), 0.3);
  }

  html[data-theme="dark"] .action-btn.secondary:hover {
    background: rgba(var(--accent-color-rgb), 0.25);
    border-color: rgba(var(--accent-color-rgb), 0.5);
  }

  /* Dark theme tech pills */
  html[data-theme="dark"] .tech-pill {
    background: rgba(var(--accent-color-rgb), 0.15);
    color: #f4f4f5;
    border: 1px solid rgba(var(--accent-color-rgb), 0.3);
  }

  html[data-theme="dark"] .tech-pill:hover {
    background: rgba(var(--accent-color-rgb), 0.25);
    box-shadow: 0 4px 12px rgba(var(--accent-color-rgb), 0.3);
  }

  /* Dark theme process */
  html[data-theme="dark"] .process-item {
    border-bottom: 1px solid #2a2a2a;
  }

  html[data-theme="dark"] .process-text {
    color: #d4d4d8;
  }

  html[data-theme="dark"] .process-number {
    background: var(--accent-color);
    color: var(--on-accent);
  }

  /* Dark theme gallery */
  html[data-theme="dark"] .gallery-hero {
    background: #262626;
    border: 1px solid #3a3a3a;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.6);
  }

  html[data-theme="dark"] .gallery-hero:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.8);
  }

  html[data-theme="dark"] .gallery-thumb {
    background: #262626;
    border: 1px solid #3a3a3a;
  }

  html[data-theme="dark"] .gallery-thumb:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
  }

  html[data-theme="dark"] .gallery-counter {
    background: rgba(0, 0, 0, 0.8);
    color: #f4f4f5;
  }

  /* Dark theme challenges and results */
  html[data-theme="dark"] .challenge-item {
    border-bottom: 1px solid #2a2a2a;
  }

  html[data-theme="dark"] .challenge-title {
    color: #f4f4f5;
  }

  html[data-theme="dark"] .challenge-text {
    color: #d4d4d8;
  }

  html[data-theme="dark"] .results-text {
    color: #d4d4d8;
  }

  html[data-theme="dark"] .results-icon {
    color: var(--accent-color);
  }


  .bento-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: auto;
    gap: 1.5rem;
  }

  /* Bento Cards Base Styling */
  .bento-card {
    background: #ffffff;
    border-radius: 16px;
    padding: 1.5rem;
    border: 2px solid #e5e5e5;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    overflow: hidden;
    position: relative;
    
    /* Initial state for scale animation */
    transform: scale(0);
    opacity: 0;
    transform-origin: center;
  }
  
  /* Simple scale animation when cards become visible */
  .bento-card.animate-in {
    transform: scale(1);
    opacity: 1;
    transition: transform var(--duration, 400ms) var(--easing, cubic-bezier(0.34, 1.56, 0.64, 1)), 
                opacity var(--duration, 400ms) ease;
  }

  .bento-card:hover,
  .bento-card:focus {
    border-color: var(--accent-color) !important;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
    outline: none; /* Remove any browser default outline */
  }

  /* Remove browser default outlines from all interactive elements */
  .bento-card button,
  .bento-card a,
  .bento-card [onclick] {
    outline: none;
  }

  .bento-card button:focus,
  .bento-card a:focus,
  .bento-card [onclick]:focus {
    outline: none;
  }

  .bento-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--accent-color), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .bento-card:hover::before {
    opacity: 1;
  }

  /* Hero Section - Large banner */
  .hero-card {
    grid-column: 5 / 13;
    grid-row: 1 / 3;
    position: relative;
    min-height: 400px;
    display: flex;
    align-items: flex-end;
    background-repeat: no-repeat;
    border: none;
    box-shadow: none;
  }

  .hero-content {
    z-index: 2;
  }

  .hero-logo {
    width: 150px;
    height: auto;
    margin-bottom: 1rem;
  }

  .hero-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #ffffff;
    text-shadow: 0 2px 10px rgba(0,0,0,0.8);
  }


  .hero-description {
    font-size: 1.1rem;
    color: #ffffff;
    max-width: 700px;
    line-height: 1.6;
  }

  /* spacing between subtitle and liquid glass panel */

  /* Quick Stats Card */
  .stats-card {
    grid-column: 1 / 5;
    grid-row: 1;
  }

  /* Music Links Card (mirrors Stats placement) */
  .music-links-card {
    grid-column: 1 / 5;
    grid-row: 1;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
  }

  /* Music Links grid mirrors stats grid */
  .music-links-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
  }

  .stat-item {
    text-align: center;
    padding: 1rem;
    background: var(--accent-bg-weak);
    border-radius: 12px;
    border: 1px solid var(--accent-border);
  }

  /* Music link button styled similar to stat-item but clickable */
  .music-link-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 1rem;
    min-height: 72px; /* Slightly smaller for closer match */
    background: var(--accent-bg-weak);
    border-radius: 12px;
    border: 1px solid var(--accent-border);
    font-weight: 600;
    color: #171717;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
    overflow: hidden; /* Prevent oversized icons from changing row height */
  }

  .music-link-btn:hover {
    background: var(--accent-bg-weak-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(var(--accent-color-rgb), 0.2);
    border-color: rgba(var(--accent-color-rgb), 0.5);
  }

  .music-link-btn img {
    width: 48px;
    height: 48px;
    object-fit: contain;
    display: block;
  }

  /* Bandcamp logo tends to have extra padding; scale it slightly larger */
  .music-link-btn[data-platform="bandcamp"] img {
    /* Visually 2x without affecting layout */
    transform: scale(2);
    transform-origin: center;
  }

  .music-link-text {
    font-size: 0.95rem;
    color: #171717;
  }

  .stat-value {
    font-size: 1.8rem;
    font-weight: 700;
    color: #171717; /* readable across accents */
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    display: block;
  }

  .stat-label {
    font-size: 0.85rem;
    color: #525252;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    margin-top: 0.3rem;
  }

  /* Action Buttons Card */
  .actions-card {
    grid-column: 1 / 5;
    grid-row: 2;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .action-btn {
    padding: 1rem 1.5rem;
    border-radius: 12px;
    text-decoration: none;
    text-align: center;
    font-weight: 600;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    font-size: 1rem;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, var(--accent-color) 0%, var(--accent-color) 100%);
    color: var(--on-accent);
    border: 1px solid rgba(0,0,0,0.12);
  }

  .action-btn.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(var(--accent-color-rgb), 0.4);
  }

  .action-btn.secondary {
    background: var(--accent-bg-weak);
    color: #000000;
    border: 2px solid var(--accent-border);
  }

  .action-btn.secondary:hover {
    background: rgba(var(--accent-color-rgb), 0.2);
    border-color: rgba(var(--accent-color-rgb), 0.6);
  }

  /* Tech Stack Card */
  .tech-card {
    grid-column: 1 / 5;
    grid-row: 3;
  }

  .tech-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    margin-top: 1rem;
  }

  .tech-pill {
    padding: 0.6rem 1.2rem;
    background: var(--accent-bg-weak);
    color: #171717;
    border-radius: 25px;
    border: 1px solid var(--accent-border);
    font-size: 0.9rem;
    font-weight: 500;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    transition: all 0.3s ease;
  }

  .tech-pill:hover {
    background: var(--accent-bg-weak-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(var(--accent-color-rgb), 0.2);
  }

  /* Process Card */
  .process-card {
    grid-column: 5 / 9;
    grid-row: 3;
  }

  .process-list {
    list-style: none;
    padding: 0;
    margin: 1rem 0;
  }

  .process-item {
    padding: 0.8rem 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 0.8rem;
  }

  .process-item:last-child {
    border-bottom: none;
  }

  .process-number {
    width: 24px;
    height: 24px;
    background: var(--accent-color);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: 600;
    flex-shrink: 0;
  }

  .process-text {
    color: #4a4a4a;
    line-height: 1.5;
  }

  /* Gallery Card */
  .gallery-card {
    grid-column: 9 / 13;
    grid-row: 3 / 5;
    min-height: 350px; /* Increased minimum height */
    min-width: 280px; /* Minimum width to prevent over-squishing */
    display: flex;
    flex-direction: column;
  }

  /* Modern Gallery Layout */
  .gallery-grid {
    display: flex;
    flex-direction: column;
    gap: 0.6rem;
    margin-top: 1rem;
    flex: 1;
    min-height: 200px;
  }

  /* Main Gallery Image */
  .gallery-hero {
    flex: 2;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #f5f5f5;
    border: 1px solid rgba(0, 0, 0, 0.08);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    position: relative;
    min-height: 120px;
  }

  .gallery-hero:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .gallery-hero img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .gallery-hero:hover img {
    transform: scale(1.05);
  }

  /* Thumbnail Strip */
  .gallery-thumbnails {
    display: flex;
    gap: 0.4rem;
    flex: 1;
    min-height: 60px;
  }

  .gallery-thumb {
    flex: 1;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #f5f5f5;
    border: 1px solid rgba(0, 0, 0, 0.06);
    position: relative;
    opacity: 0.85;
  }

  .gallery-thumb:hover {
    opacity: 1;
    transform: translateY(-1px) scale(1.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .gallery-thumb img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Gallery Counter Badge */
  .gallery-counter {
    position: absolute;
    bottom: 8px;
    right: 8px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 2px 6px;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: 500;
    backdrop-filter: blur(4px);
  }

  /* Challenges Card */
  .challenges-card {
    grid-column: 1 / 6;
    grid-row: 4;
  }

  .challenge-item {
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .challenge-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  .challenge-title {
    color: #000000;
    font-weight: 600;
    margin-bottom: 0.5rem;
    font-size: 1rem;
  }

  .challenge-text {
    color: #555;
    font-size: 0.9rem;
    line-height: 1.5;
  }

  /* Results Card */
  .results-card {
    grid-column: 6 / 9;
    grid-row: 4;
  }

  .results-list {
    list-style: none;
    padding: 0;
    margin: 1rem 0;
  }

  .results-item {
    padding: 0.8rem 0;
    display: flex;
    align-items: flex-start;
    gap: 0.8rem;
  }

  .results-icon {
    color: var(--accent-color);
    font-size: 1.2rem;
    margin-top: 0.1rem;
  }

  .results-text {
    color: #4a4a4a;
    line-height: 1.5;
    font-size: 0.95rem;
  }

  /* Card Titles */
  .card-title {
    font-size: 1.4rem;
    color: #171717;
    margin-bottom: 0.5rem;
    font-weight: 600;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  .card-subtitle {
    color: #525252;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  /* Responsive Design - Mobile First Approach */
  
  /* Large Tablets & Small Desktops (1200px - 1399px) */
  @media (max-width: 1399px) {
    .bento-container {
      max-width: 1200px;
      padding: 1.5rem;
    }
  }

  /* Medium Tablets (900px - 1199px) */
  @media (max-width: 1199px) {
    .bento-container {
      grid-template-columns: repeat(10, 1fr);
      gap: 1.2rem;
      padding: 1.2rem;
    }
    
    .hero-card { 
      grid-column: 5 / 11; 
      grid-row: 1 / 3; 
    }
    .stats-card { 
      grid-column: 1 / 5; 
      grid-row: 1; 
    }
    .music-links-card {
      grid-column: 1 / 5;
      grid-row: 1;
    }
    .actions-card { 
      grid-column: 1 / 5; 
      grid-row: 2; 
    }
    .tech-card { 
      grid-column: 1 / 5; 
      grid-row: 3; 
    }
    .process-card { 
      grid-column: 5 / 8; 
      grid-row: 3; 
    }
    .gallery-card { 
      grid-column: 8 / 11; 
      grid-row: 3 / 5;
      min-height: 320px;
      display: flex;
      flex-direction: column;
    }
    
    /* Medium tablet gallery - keep hero + thumbnails */
    .challenges-card { 
      grid-column: 1 / 8; 
      grid-row: 4; 
    }
    .results-card { 
      grid-column: 1 / 8; 
      grid-row: 5; 
    }
  }

  /* Small Tablets (700px - 899px) */
  @media (max-width: 899px) {
    .bento-container {
      grid-template-columns: repeat(8, 1fr);
      gap: 1rem;
      padding: 1rem;
    }
    
    .hero-card { 
      grid-column: 4 / 9; 
      grid-row: 1 / 3;
      min-height: 300px;
    }
    .stats-card { 
      grid-column: 1 / 4; 
      grid-row: 1; 
    }
    .music-links-card {
      grid-column: 1 / 4;
      grid-row: 1;
    }
    .actions-card { 
      grid-column: 1 / 4; 
      grid-row: 2; 
    }
    .tech-card { 
      grid-column: 1 / 5; 
      grid-row: 3; 
    }
    .process-card { 
      grid-column: 5 / 9; 
      grid-row: 3; 
    }
    .gallery-card { 
      grid-column: 1 / 5; 
      grid-row: 4;
      min-height: 280px;
    }
    
    /* Small tablet - adjust thumbnail size */
    .gallery-card .gallery-thumbnails {
      min-height: 50px;
    }
    .challenges-card { 
      grid-column: 5 / 9; 
      grid-row: 4; 
    }
    .results-card { 
      grid-column: 1 / 9; 
      grid-row: 5; 
    }

    .hero-title {
      font-size: 2.2rem;
    }
    
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* Mobile Landscape (500px - 699px) */
  @media (max-width: 699px) {
    .project-bento {
      padding-top: 4.5rem; /* Extra space for close button on mobile landscape */
    }

    .bento-container {
      grid-template-columns: repeat(6, 1fr);
      gap: 0.8rem;
      padding: 0.8rem;
    }
    
    .hero-card { 
      grid-column: 1 / 7; 
      grid-row: 1;
      min-height: 250px;
    }
    .stats-card { 
      grid-column: 1 / 4; 
      grid-row: 2; 
    }
    .music-links-card {
      grid-column: 1 / 4;
      grid-row: 2;
    }
    .actions-card { 
      grid-column: 4 / 7; 
      grid-row: 2; 
    }
    .tech-card { 
      grid-column: 1 / 7; 
      grid-row: 3; 
    }
    .process-card { 
      grid-column: 1 / 7; 
      grid-row: 4; 
    }
    .gallery-card { 
      grid-column: 1 / 7; 
      grid-row: 5;
      min-height: 200px;
    }
    
    /* Mobile landscape - stack thumbnails vertically */
    .gallery-card .gallery-thumbnails {
      flex-direction: column;
      min-height: 80px;
    }
    .challenges-card { 
      grid-column: 1 / 7; 
      grid-row: 6; 
    }
    .results-card { 
      grid-column: 1 / 7; 
      grid-row: 7; 
    }

    .hero-title {
      font-size: 1.8rem;
    }
    
    .card-title {
      font-size: 1.2rem;
    }
  }

  /* Mobile Portrait (320px - 499px) */
  @media (max-width: 499px) {
    .project-bento {
      padding-top: 5rem; /* Extra space for close button on mobile */
    }

    .bento-container {
      grid-template-columns: 1fr;
      gap: 0.8rem;
      padding: 0.8rem;
    }

    .bento-card {
      grid-column: 1 !important;
      grid-row: auto !important;
      padding: 1.2rem;
    }

    .hero-card {
      min-height: 200px;
      align-items: center;
      text-align: center;
    }

    .hero-title {
      font-size: 1.6rem;
    }
    
    .hero-description {
      font-size: 1rem;
    }

    .card-title {
      font-size: 1.1rem;
    }

    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .tech-grid {
      justify-content: center;
    }

    /* Mobile portrait - hide thumbnails, show only hero */
    .gallery-card .gallery-thumbnails {
      display: none;
    }
    
    .gallery-card .gallery-hero {
      min-height: 120px;
    }

    .action-buttons {
      flex-direction: column;
    }
  }
</style>

<div class="project-bento">
  <div class="bento-container">
    
    <!-- Hero Card - Main banner with project info -->
    {cards.hero && (
      <div class="bento-card hero-card" style={heroStyle}>
        <div class="hero-content">
          {(heroLogoUrl && (bento.hero?.showLogo ?? true)) && (
            <img src={heroLogoUrl} alt={`${data.title} Logo`} class="hero-logo">
          )}
          <h1 class="hero-title">{data.title}</h1>
          <p class="hero-description">{data.description}</p>
        </div>
      </div>
    )}

    {/* No SVG distortion; keep glass simple and clean */}

    <!-- Music Links (takes first slot; hides Stats when enabled) -->
    {hasMusicLinks && (
      <div class="bento-card music-links-card">
        <h3 class="card-title">{bento.musicLinks.title || 'Music Links'}</h3>
        <div class="music-links-grid">
          {bento.musicLinks.items.map(link => {
            const key = inferPlatform(link.text, link.url);
            const icon = key ? MUSIC_ICONS[key] : undefined;
            const label = link.text || key || 'Open link';
            return (
              <a class="music-link-btn" data-platform={key || 'generic'} href={link.url} target="_blank" rel="noopener noreferrer" aria-label={label} title={label}>
                {icon ? (
                  <img src={icon} alt={`${label} logo`} />
                ) : (
                  <span class="music-link-text">{label}</span>
                )}
              </a>
            );
          })}
        </div>
      </div>
    )}

    <!-- Quick Stats -->
    {!hasMusicLinks && cards.stats && bento.stats && (
      <div class="bento-card stats-card">
        <h3 class="card-title">Project Stats</h3>
        <div class="stats-grid">
          {bento.stats.map(stat => (
            <div class="stat-item">
              <span class="stat-value">{stat.value}</span>
              <span class="stat-label">{stat.label}</span>
            </div>
          ))}
        </div>
      </div>
    )}

    <!-- Action Buttons -->
    {cards.actions && bento.actions && (
      <div class="bento-card actions-card">
        <h3 class="card-title">{bento.actions.title || 'Experience'}</h3>
        {bento.actions.primary && (
          <a href={bento.actions.primary.url} target="_blank" class="action-btn primary">
            {bento.actions.primary.text}
          </a>
        )}
        {bento.actions.secondary && (
          <button class="action-btn secondary" onclick={bento.actions.secondary.url ? `window.open('${bento.actions.secondary.url}', '_blank')` : undefined}>
            {bento.actions.secondary.text}
          </button>
        )}
      </div>
    )}

    <!-- Technology Stack -->
    {cards.tech && (
      <div class="bento-card tech-card">
        <h3 class="card-title">Technology</h3>
        <p class="card-subtitle">Tools and technologies used</p>
        <div class="tech-grid">
          {data.tech.map(tech => (
            <span class="tech-pill">{tech}</span>
          ))}
        </div>
      </div>
    )}

    <!-- Development Process -->
    {cards.process && bento.process && (
      <div class="bento-card process-card">
        <h3 class="card-title">{bento.process.title || 'Process'}</h3>
        {bento.process.subtitle && (
          <p class="card-subtitle">{bento.process.subtitle}</p>
        )}
        <ul class="process-list">
          {bento.process.steps.map((step, index) => (
            <li class="process-item">
              <span class="process-number">{index + 1}</span>
              <span class="process-text">{step}</span>
            </li>
          ))}
        </ul>
      </div>
    )}

    <!-- Gallery -->
    {cards.gallery && (galleryImages && galleryImages.length > 0) && (
      <div class="bento-card gallery-card">
        <h3 class="card-title">{(bento.gallery?.title) || 'Gallery'}</h3>
        <div class="gallery-grid">
          {galleryImages[0] && (
            <div class="gallery-hero" onclick={galleryImages[0].src ? `window.open('${galleryImages[0].src}', '_blank')` : undefined}>
              <img src={galleryImages[0].src} alt={galleryImages[0].alt || 'Gallery image'}>
              <div class="gallery-counter">{galleryImages.length} images</div>
            </div>
          )}
          {galleryImages.length > 1 && (
            <div class="gallery-thumbnails">
              {galleryImages.slice(1).map(image => (
                <div class="gallery-thumb" onclick={`window.open('${image.src}', '_blank')`}>
                  <img src={image.src} alt={image.alt || 'Gallery image'}>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    )}

    <!-- Technical Challenges -->
    {cards.challenges && bento.challenges && (
      <div class="bento-card challenges-card">
        <h3 class="card-title">{bento.challenges.title || 'Key Challenges'}</h3>
        {bento.challenges.subtitle && (
          <p class="card-subtitle">{bento.challenges.subtitle}</p>
        )}
        
        {bento.challenges.items.map(challenge => (
          <div class="challenge-item">
            <div class="challenge-title">{challenge.title}</div>
            <div class="challenge-text">{challenge.description}</div>
          </div>
        ))}
      </div>
    )}

    <!-- Results & Impact -->
    {cards.results && bento.results && (
      <div class="bento-card results-card">
        <h3 class="card-title">{bento.results.title || 'Results'}</h3>
        {bento.results.subtitle && (
          <p class="card-subtitle">{bento.results.subtitle}</p>
        )}
        
        <ul class="results-list">
          {bento.results.items.map(result => (
            <li class="results-item">
              <span class="results-icon">{result.icon}</span>
              <span class="results-text">{result.text}</span>
            </li>
          ))}
        </ul>
      </div>
    )}

  </div>
</div>

<script>
  // PLACEHOLDER: Tone.js is temporary - will be replaced with custom OGG audio files
  // See docs/history/PHASE_LOGS.md Phase 3C for audio architecture plan
  import * as Tone from 'tone';

  // Simple Bento Animation System with Synced Audio
  class BentoAnimationSystem {
    constructor() {
      this.isInitialized = false;
      this.synth = null;
      this.chorus = null;
      this.config = null;
      this.isPlaying = false;
    }

    async init() {
      if (this.isInitialized) return;
      
      try {
        // Always set config with fallback
        this.config = {
          enabled: true,
          staggerDelayMs: 80,
          animationDurationMs: 400,
          easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)',
          cardEnabled: { hero: true, stats: true, actions: true, tech: true, gallery: true, process: true, challenges: true, results: true },
          audio: {
            enabled: true,
            volume: 0.4,
            syncWithAnimation: true,
            pitches: { hero: 'C3', stats: 'E3', actions: 'G3', tech: 'C4', gallery: 'E4', process: 'G4', challenges: 'B3', results: 'D4' },
            synthesis: { attack: 0.01, decay: 0.3, sustain: 0, release: 0.8, chorus: { frequency: 4, depth: 0.3 } }
          }
        };
        
        // Override with global config if available
        if (window.atomConfig?.bentoAnimations) {
          this.config = { ...this.config, ...window.atomConfig.bentoAnimations };
        }

        if (!this.config.audio?.enabled) {
          this.isInitialized = true;
          return;
        }

        // PLACEHOLDER: Audio will be replaced with custom OGG files + Web Audio API
        // Only create audio objects when actually needed (defer until user interaction)
        console.log('🎵 Bento Animation System initialized (audio deferred until user interaction)');
        this.isInitialized = true;
        
      } catch (error) {
        console.warn('Failed to initialize Bento system:', error);
      }
    }

    async initAudio() {
      if (this.synth) return; // Already initialized
      
      try {
        console.log('🎵 Initializing audio after user interaction...');
        
        // PLACEHOLDER: Tone.js synthesis - replace with OGG file loading
        // Create bubbly sine wave synth
        this.chorus = new Tone.Chorus(
          this.config.audio.synthesis.chorus.frequency,
          this.config.audio.synthesis.chorus.depth,
          0.5
        ).toDestination();

        this.synth = new Tone.Synth({
          oscillator: { type: 'sine' },
          envelope: {
            attack: this.config.audio.synthesis.attack,
            decay: this.config.audio.synthesis.decay,
            sustain: this.config.audio.synthesis.sustain,
            release: this.config.audio.synthesis.release
          }
        }).connect(this.chorus);

        this.synth.volume.value = Tone.gainToDb(this.config.audio.volume);
        
        console.log('🎵 Audio components created successfully');
      } catch (error) {
        console.warn('Failed to initialize audio:', error);
      }
    }

    getCardType(card) {
      // Determine card type from classes
      if (card.classList.contains('hero-card')) return 'hero';
      if (card.classList.contains('music-links-card')) return 'stats';
      if (card.classList.contains('stats-card')) return 'stats';
      if (card.classList.contains('actions-card')) return 'actions';
      if (card.classList.contains('tech-card')) return 'tech';
      if (card.classList.contains('gallery-card')) return 'gallery';
      if (card.classList.contains('process-card')) return 'process';
      if (card.classList.contains('challenges-card')) return 'challenges';
      if (card.classList.contains('results-card')) return 'results';
      return 'hero'; // fallback
    }

    async ensureAudioReady() {
      if (!this.isInitialized) await this.init();
      
      // Initialize audio components on first use (user gesture)
      if (!this.synth && this.config.audio?.enabled) {
        await this.initAudio();
      }
      
      // PLACEHOLDER: Replace with Web Audio API context initialization
      // Start Tone.js context if needed
      if (this.synth && Tone.context.state !== 'running') {
        console.log('🎵 Starting Tone.js context...');
        await Tone.start();
      }
    }

    animateCard(card, cardType, index) {
      if (!this.config) return; // Safety check
      
      const isEnabled = this.config.cardEnabled?.[cardType] ?? true;
      if (!isEnabled) return;
      
      // Set CSS custom properties
      card.style.setProperty('--duration', `${this.config.animationDurationMs}ms`);
      card.style.setProperty('--easing', this.config.easing);
      
      // Reset any existing classes
      card.classList.remove('animate-in');
      
      const delay = index * this.config.staggerDelayMs;
      
      setTimeout(() => {
        // Start animation
        card.classList.add('animate-in');
        
        // Play ONE note ONLY when animation starts
        if (this.config.audio?.enabled && this.isInitialized && this.synth) {
          const pitch = this.config.audio.pitches?.[cardType] || 'C4';
          console.log(`🎵 Playing ${pitch} for ${cardType} card ${index}`);
          
          try {
            // PLACEHOLDER: Replace with Web Audio API buffer source playback
            // Use Tone.now() + small offset to prevent timing conflicts
            const when = Tone.now() + 0.01; // 10ms offset to ensure proper scheduling
            this.synth.triggerAttackRelease(pitch, '8n', when);
          } catch (error) {
            console.warn(`Audio error for ${cardType}:`, error);
          }
        }
      }, delay);
    }

    async startAnimation() {
      console.log('🎵 startAnimation() called', { isPlaying: this.isPlaying });
      
      if (this.isPlaying) {
        console.log('🎵 Already playing, returning early');
        return;
      }
      this.isPlaying = true;
      
      // Ensure config is loaded first
      if (!this.config) {
        await this.init();
      }
      
      // Ensure audio is ready ONCE before starting
      if (this.config?.audio?.enabled) {
        await this.ensureAudioReady();
      }
      
      // Only select cards from the currently visible bento project
      const visibleBentoProject = document.querySelector('#bento-content .bento-project[style*="display: block"]');
      const cards = visibleBentoProject ? visibleBentoProject.querySelectorAll('.bento-card') : [];
      
      console.log(`🎵 Starting bento animation for ${cards.length} cards (audio: ${this.config.audio?.enabled})`);
      console.log(`🎵 Visible project:`, visibleBentoProject?.dataset?.projectSlug || 'none');
      
      cards.forEach((card, index) => {
        const cardType = this.getCardType(card);
        this.animateCard(card, cardType, index);
      });
      
      // Reset playing flag after animation completes
      const totalTime = (cards.length * this.config.staggerDelayMs) + this.config.animationDurationMs + 200;
      setTimeout(() => {
        this.isPlaying = false;
      }, totalTime);
    }

    reset() {
      console.log('🎵 reset() called');
      // Reset ALL bento cards (since we're closing/switching projects)
      const cards = document.querySelectorAll('#bento-content .bento-card');
      cards.forEach(card => {
        card.classList.remove('animate-in');
      });
      this.isPlaying = false;
    }
  }

  // Global instance
  let bentoAnimationSystem = null;

  // Main animation function with perfect audio sync
  async function animateBentoCards() {
    console.log('🎵 animateBentoCards() called', { 
      hasSystem: !!bentoAnimationSystem, 
      isPlaying: bentoAnimationSystem?.isPlaying,
      stack: new Error().stack 
    });
    
    if (!bentoAnimationSystem) {
      bentoAnimationSystem = new BentoAnimationSystem();
    }
    
    // Extra safety: prevent multiple calls
    if (bentoAnimationSystem.isPlaying) {
      console.log('🎵 Animation already playing, skipping...');
      return;
    }
    
    await bentoAnimationSystem.startAnimation();
  }

  // Reset function for overlay close
  function resetBentoCards() {
    console.log('🎵 resetBentoCards() called globally');
    if (bentoAnimationSystem) {
      bentoAnimationSystem.reset();
    }
  }

  // Export functions globally
  if (typeof window !== 'undefined') {
    window.animateBentoCards = animateBentoCards;
    window.resetBentoCards = resetBentoCards;
    
    // Auto-run for direct page loads
    document.addEventListener('DOMContentLoaded', () => {
      const bentoContent = document.getElementById('bento-content');
      if (bentoContent && bentoContent.style.display !== 'none') {
        setTimeout(animateBentoCards, 100);
      }
    });
  }

  // No shimmer animation — simplified glass for clarity
</script>
