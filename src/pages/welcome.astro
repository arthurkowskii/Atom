---
import Header from '../components/Header.astro';
import { userTweaks } from '../user-tweaks.js';
const pre = userTweaks.prePage || {};
const title = 'Enter Portfolio';
const btnLabel = pre.buttonLabel || 'Enter Portfolio';
const storageKey = pre.storageKey || 'entered';
const doNoindex = pre.noindex !== false;
const enableAudioPrewarm = pre.audioPrewarm === true;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    {doNoindex && (<meta name="robots" content="noindex, nofollow" />)}

    <!-- Theme init (before paint) -->
    <script>
      (function(){
        try {
          const saved = localStorage.getItem('theme');
          const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
          const theme = saved || (prefersDark ? 'dark' : 'light');
          document.documentElement.setAttribute('data-theme', theme);
        } catch {}
      })();
    </script>

    <style>
      :root { color-scheme: light dark; }
      * { box-sizing: border-box; }
      html, body { height: 100%; }
      body {
        margin: 0;
        background: #fff;
        color: #000;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, system-ui, sans-serif;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }
      html[data-theme="dark"] body { background: #0f0f0f; color: #e4e4e7; }

      .wrap {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 24px;
      }
      .enter-card {
        display: inline-flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        padding: 28px 32px;
        background: #ffffff;
        color: #111827;
        box-shadow: 0 4px 20px rgba(0,0,0,0.06);
      }
      html[data-theme="dark"] .enter-card {
        background: #111111;
        color: #f3f4f6;
        border-color: #2a2a2a;
      }
      .enter-title { font-size: 20px; margin: 0; }
      .enter-btn {
        -webkit-appearance: none;
        appearance: none;
        border: 1px solid #111827;
        background: #111827;
        color: #ffffff;
        padding: 10px 18px;
        border-radius: 9999px;
        cursor: pointer;
        font-size: 14px;
        line-height: 1;
        transition: transform 0.15s ease, box-shadow 0.15s ease, background 0.15s ease, color 0.15s ease;
      }
      .enter-btn:hover { transform: translateY(-1px); box-shadow: 0 8px 24px rgba(0,0,0,0.12); }
      .enter-btn:active { transform: translateY(0); }
      html[data-theme="dark"] .enter-btn { background: #f9fafb; color: #111827; border-color: #cbd5e1; }
      .enter-hint { font-size: 12px; color: #6b7280; }
      html[data-theme="dark"] .enter-hint { color: #9ca3af; }
    </style>
  </head>
  <body>
    <!-- Show the same header to keep the one-page feel -->
    <Header />

    <div class="wrap">
      <div class="enter-card" role="dialog" aria-labelledby="enter-title" aria-describedby="enter-desc">
        <h2 id="enter-title" class="enter-title">{title}</h2>
        <p id="enter-desc" class="enter-hint">Click to enter the portfolio</p>
        <button id="enter-btn" class="enter-btn" aria-label={btnLabel}>{btnLabel}</button>
      </div>
    </div>

    <script type="module" define:vars={{ storageKey, enableAudioPrewarm }}>
      const key = storageKey || 'entered';
      const enableAudio = !!enableAudioPrewarm;
      const btn = document.getElementById('enter-btn');
      if (btn) {
        btn.addEventListener('click', async () => {
          try {
            // Mark entered for this tab (session only)
            sessionStorage.setItem(key, '1');
          } catch {}

          // Best effort audio prewarm via Web Audio API
          if (enableAudio) {
            try {
              const Ctx = window.AudioContext || window.webkitAudioContext;
              if (Ctx) {
                const ctx = new Ctx();
                if (ctx?.state === 'suspended' && ctx.resume) await ctx.resume();
                // Create a minimal silent buffer to exercise output path
                try {
                  const buffer = ctx.createBuffer(1, 1, 22050);
                  const source = ctx.createBufferSource();
                  source.buffer = buffer;
                  source.connect(ctx.destination);
                  source.start(0);
                } catch {}
                if (ctx?.close) { try { await ctx.close(); } catch {} }
              }
            } catch {}
          }

          // Mark entry event in case the main page wants to read it for intro animation
          try { sessionStorage.setItem('enterFx', 'electron'); } catch {}

          // Navigate to main page (replace to avoid stacking history)
          location.replace('/');
        });
      }
    </script>
  </body>
  </html>
