---
import { getCollection, getEntryBySlug } from 'astro:content';
import BioBW from '../components/BioBW.astro';
import LogoAbleton from '../Assets/software_logos/Ableton.webp';
import LogoReaper from '../Assets/software_logos/Reaper.webp';
import LogoLogicPro from '../Assets/software_logos/Logic_Pro.webp';
import LogoProTools from '../Assets/software_logos/Pro_Tools.webp';
import LogoFMOD from '../Assets/software_logos/Fmod.webp';
import LogoWwise from '../Assets/software_logos/Wwise.webp';
import LogoUnity from '../Assets/software_logos/Unity.webp';
import LogoCsharp from '../Assets/software_logos/Csharp.webp';
import LogoGit from '../Assets/software_logos/Git.webp';
import LogoDavinci from '../Assets/software_logos/Davinci_Resolve.webp';
import LogoCinema4D from '../Assets/software_logos/Cinema_4D.webp';
import LogoPhotoshop from '../Assets/software_logos/photoshop.webp';
import atomConfig from '../atom.config.js';
import { userTweaks } from '../user-tweaks.js';
import { calculateElectronPositions } from '../atom/utils/electronPositioning.js';

// Get all projects and compute domains from folder structure
const projects = await getCollection('projects');

// Compute domain from folder structure or use explicit domain
const projectsWithDomains = projects.map(project => {
  let domain = project.data.domain;
  
  // If no explicit domain, compute from folder structure
  if (!domain) {
    const pathParts = project.id.split('/');
    if (pathParts.length > 1) {
      // Project is in a domain folder (e.g., "music/song-alpha.md")
      domain = pathParts[0];
    } else {
      // Project is in root projects folder, default to 'tech'
      domain = 'tech';
    }
  }
  
  return {
    ...project,
    data: {
      ...project.data,
      domain
    }
  };
});

// Use explicit domain shell ordering from configuration
const domains = userTweaks.domainShellOrder.filter(domain => 
  projectsWithDomains.some(p => p.data.domain === domain)
);

// Calculate electron positions for each shell
const electronsByDomain = projectsWithDomains.reduce((acc, project) => {
  if (!acc[project.data.domain]) acc[project.data.domain] = [];
  acc[project.data.domain].push(project);
  return acc;
}, {});
// Minimal project payload for the client overlay
const projectSummaries = projectsWithDomains.map(p => ({
  slug: p.slug,
  title: p.data.title,
  description: p.data.description,
  domain: p.data.domain,
  tech: p.data.tech,
  link: p.data.link,
  github: p.data.github,
}));

// Prepare Bio payload from content collection (bio/about)
let bioPayload = {};
try {
  const bioEntry = await getEntryBySlug('bio', 'about');
  if (bioEntry?.data) {
    const d = bioEntry.data as any;
    bioPayload = {
      title: d.title || '',
      subtitle: d.subtitle || '',
      bio: d.bio || '',
      portrait: d.portrait || '/images/bio/arthur-portfolio.jpg',
      email: d.email || '',
      social: d.social || [],
      skills: d.skills || [],
    };
  }
} catch {}

// Map of tool name -> logo URL for overlay rendering
const logosMap = {
  'Ableton': LogoAbleton,
  'Reaper': LogoReaper,
  'Logic Pro': LogoLogicPro,
  'Pro Tools': LogoProTools,
  'FMOD': LogoFMOD,
  'Wwise': LogoWwise,
  'Unity': LogoUnity,
  'C#': LogoCsharp,
  'Git': LogoGit,
  'DaVinci Resolve': LogoDavinci,
  'Cinema 4D': LogoCinema4D,
  'Photoshop': LogoPhotoshop,
};

// Helpers for label paths
function circlePathD(cx: number, cy: number, r: number) {
  // Draw full circle with two 180Â° arcs for Safari reliability
  const x0 = cx - r;
  const y0 = cy;
  const d = [
    `M ${x0} ${y0}`,
    `a ${r} ${r} 0 1 1 ${2 * r} 0`,
    `a ${r} ${r} 0 1 1 ${-2 * r} 0`
  ].join(' ');
  return d;
}

function arcPathD(cx: number, cy: number, r: number, startDeg: number, endDeg: number) {
  const toRad = (deg: number) => (deg * Math.PI) / 180;
  const sx = cx + r * Math.cos(toRad(startDeg));
  const sy = cy + r * Math.sin(toRad(startDeg));
  const ex = cx + r * Math.cos(toRad(endDeg));
  const ey = cy + r * Math.sin(toRad(endDeg));
  const sweep = endDeg > startDeg ? 1 : 0;
  const large = Math.abs(endDeg - startDeg) > 180 ? 1 : 0;
  return `M ${sx} ${sy} A ${r} ${r} 0 ${large} ${sweep} ${ex} ${ey}`;
}

function displayNameForDomain(slug: string) {
  const map = (atomConfig as any).domainDisplayNames || {};
  if (map && slug in map) return map[slug];
  return String(slug || '').replace(/-/g, ' ').toUpperCase();
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
			<meta name="generator" content={Astro.generator} />
			<title>Atom Portfolio</title>
			<style>
            body {
                margin: 0;
                padding: 0;
                background: #fff;
                font-family: system-ui, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                overflow: hidden; /* prevent page scroll white borders during drag */
                user-select: none; /* avoid text selection while dragging */
            }
            
            .atom-container {
                display: flex;
                justify-content: center;
                align-items: center;
            }
            
            #atom-svg {
                cursor: grab;
                touch-action: none; /* prevent touch scrolling/zoom white borders */
                /* Use layout sizing for crisp vectors instead of CSS transform scaling */
                width: 100vmin;
                height: 100vmin;
            }
			
			.electron {
				cursor: pointer;
			}

            /* One-page overlay for project details (masked by clip-path) */
            #project-overlay {
                position: fixed;
                inset: 0;
                background: #fff;
                color: #000;
                z-index: 9999;
                display: none; /* shown via .open */
                /* Hard-edge fallback via clip-path */
                clip-path: circle(var(--r, 0px) at var(--x, 50%) var(--y, 50%));
                /* Soft edge via mask-image (progressive enhancement) */
                -webkit-mask-image: radial-gradient(
                  circle at var(--x, 50%) var(--y, 50%),
                  rgba(0,0,0,1) calc(var(--r, 0px) - var(--soft, 0px)),
                  rgba(0,0,0,0) var(--r, 0px)
                );
                mask-image: radial-gradient(
                  circle at var(--x, 50%) var(--y, 50%),
                  rgba(0,0,0,1) calc(var(--r, 0px) - var(--soft, 0px)),
                  rgba(0,0,0,0) var(--r, 0px)
                );
                will-change: clip-path, -webkit-mask-image, mask-image;
            }
            #project-overlay.open { display: block; }
            #project-overlay .inner {
                max-width: 900px;
                margin: 0 auto;
                padding: 48px 24px;
                opacity: 1; /* Opaque during opening for progressive reveal */
                transition: none;
            }
            /* Ensure Bio uses its own layout widths/padding to match /bio */
            #project-overlay #bio-content.inner {
                max-width: none;
                padding: 0;
            }
            #project-overlay.open .inner { opacity: 1; }
            #project-overlay .close-btn {
                position: fixed;
                top: 16px;
                right: 16px;
                width: 36px; height: 36px;
                border: 1px solid #000; border-radius: 50%; background: #fff; color: #000;
                cursor: pointer; font-size: 18px; line-height: 34px; text-align: center;
            }

            /* Improve SVG text clarity, especially in Chrome */
            #atom-svg text {
                text-rendering: geometricPrecision;      /* Hint for precise glyph shapes */
                -webkit-font-smoothing: antialiased;     /* Chrome/WebKit */
                -moz-osx-font-smoothing: grayscale;      /* Firefox on macOS */
            }
            /* Ensure nucleus label does not intercept pointer events */
            .nucleus-label { pointer-events: none; }
            
            /* Pruned old bio styles (legacy) */

				/* BioBW component owns its own styles; no duplicates here */

            /* Shell labels (curved text on rings) */
            .shell-label { fill: #000; letter-spacing: 2px; text-transform: uppercase; }
            .shell-label-rotor { pointer-events: none; }
            /* Ring mode: prefer arc on small screens */
            .shell-label--arc { display: none; }
            @media (max-width: 700px) {
              .shell-label--full { display: none; }
              .shell-label--arc { display: inline; opacity: 0.35 !important; }
            }
            /* Orbiting word mode */
            .orbit-label { fill: #000; letter-spacing: 2px; text-transform: uppercase; }
		</style>
	</head>
	<body>
		<div class="atom-container">
			<svg 
				id="atom-svg"
				width={atomConfig.viewport.width} 
				height={atomConfig.viewport.height} 
				viewBox={`0 0 ${atomConfig.viewport.width} ${atomConfig.viewport.height}`}
				xmlns="http://www.w3.org/2000/svg"
			>
				<!-- Nucleus (clickable like an electron, not draggable) -->
				<circle 
					id="nucleus-circle"
					class="electron nucleus"
					cx={atomConfig.viewport.centerX}
					cy={atomConfig.viewport.centerY}
					r={atomConfig.nucleus.radius}
					fill={atomConfig.electrons.color}
					stroke={atomConfig.nucleus.color}
					stroke-width={atomConfig.nucleus.strokeWidth}
				/>
				<text 
					class="nucleus-label"
					x={atomConfig.viewport.centerX}
					y={atomConfig.viewport.centerY}
					text-anchor="middle"
					dominant-baseline="middle"
					font-size={atomConfig.nucleus.fontSize}
					font-weight="bold"
					fill="#fff"
				>
					{atomConfig.nucleus.text}
				</text>

				<!-- Orbital Shells -->
				{domains.map((domain, shellIndex) => {
					const shell = atomConfig.shells[shellIndex] || atomConfig.shells[atomConfig.shells.length - 1];
					const electronsInShell = electronsByDomain[domain] || [];
					
					// Random positioning with collision avoidance
					const minDistance = atomConfig.spacing?.minElectronDistance || 60;
					const count = electronsInShell.length;
					
					let electronPositions = [];
					
					if (count === 1) {
						electronPositions = [Math.random() * 360];
					} else if (count > 1) {
						// Generate random positions with minimum distance enforcement
						for (let i = 0; i < count; i++) {
							let attempts = 0;
							let validPosition = false;
							let newAngle;
							
							while (!validPosition && attempts < 100) {
								newAngle = Math.random() * 360;
								validPosition = true;
								
								// Check distance to all existing positions
								for (let existingAngle of electronPositions) {
									const angleDiff = Math.abs(newAngle - existingAngle);
									const minDist = Math.min(angleDiff, 360 - angleDiff); // Handle wrap-around
									
									if (minDist < minDistance) {
										validPosition = false;
										break;
									}
								}
								attempts++;
							}
							
							// If we couldn't find a valid position after many attempts, just place it randomly
							electronPositions.push(newAngle || Math.random() * 360);
						}
					}
					
					
					return (
						<g data-shell={shellIndex} data-domain={domain}>
							{/* Label defs and rendering by mode */}
							{atomConfig.labels?.enabled && (atomConfig.labels?.mode === 'ring' || atomConfig.labels?.mode === 'ringPattern') ? (
								<defs>
									{(() => {
										const r = shell.radius + (atomConfig.labels?.offsetPx ?? 16);
										const cx = atomConfig.viewport.centerX;
										const cy = atomConfig.viewport.centerY;
										const fullId = `label-path-full-${shellIndex}`;
										const arcId = `label-path-arc-${shellIndex}`;
										const arcDeg = atomConfig.labels?.mobileArcDegrees ?? 150;
										const start = -90 - arcDeg / 2;
										const end = -90 + arcDeg / 2;
										return (
											<>
												<path id={fullId} d={circlePathD(cx, cy, r)} fill="none" />
												<path id={arcId} d={arcPathD(cx, cy, r, start, end)} fill="none" />
											</>
										);
									})()}
								</defs>
							) : null}
							{atomConfig.labels?.enabled && (atomConfig.labels?.mode === 'ring' || atomConfig.labels?.mode === 'ringPattern') ? (
								<g class="shell-label-rotor" data-shell-index={shellIndex} style="pointer-events: none;">
									{(() => {
										const display = displayNameForDomain(domain);
                  const repeatsByShell = atomConfig.labels?.pattern?.repeatsByShell || [];
                  const repeats = Math.max(1, (repeatsByShell[shellIndex] ?? (atomConfig.labels?.repeat ?? 10)));
                  const sep = atomConfig.labels?.pattern?.separator ?? ' â¢ ';
                  const labelText = Array.from({ length: repeats }, () => display).join(sep);
										const fullHref = `#label-path-full-${shellIndex}`;
										const arcHref = `#label-path-arc-${shellIndex}`;
										const isPattern = atomConfig.labels?.mode === 'ringPattern';
										const offsets = atomConfig.labels?.pattern?.offsetsPercentByShell || [];
										const startOffset = isPattern ? String(offsets[shellIndex % offsets.length] || 0) + '%' : '0%';
										return (
											<>
												<text class="shell-label shell-label--full" data-shell-index={shellIndex} style={`opacity:${atomConfig.labels?.idleOpacity ?? 0.35}`}
													font-size={atomConfig.labels?.fontSize}
													text-anchor="start"
												>
													<textPath href={fullHref} startOffset={startOffset}>{labelText}</textPath>
												</text>
												<text class="shell-label shell-label--arc" data-shell-index={shellIndex} style="opacity:0"
													font-size={atomConfig.labels?.fontSize}
													text-anchor="middle"
												>
													<textPath href={arcHref} startOffset="50%">{display}</textPath>
												</text>
											</>
										);
									})()}
								</g>
							) : null}

                {atomConfig.labels?.enabled && (atomConfig.labels?.mode === 'orbiting') ? (
                  <g class="shell-label-rotor" data-shell-index={shellIndex} style="pointer-events: none;">
                    {(() => {
                      const cx = atomConfig.viewport.centerX;
                      const cy = atomConfig.viewport.centerY;
                      const r = Math.max(10, shell.radius - (atomConfig.labels?.wordOrbit?.innerOffsetPx ?? 20));
                      const arcDeg = atomConfig.labels?.wordOrbit?.arcDegrees ?? 160;
                      const center = atomConfig.labels?.wordOrbit?.centerAngleDeg ?? -90;
                      const start = center - arcDeg / 2;
                      const end = center + arcDeg / 2;
                      const id = `orbit-label-path-${shellIndex}`;
                      const display = displayNameForDomain(domain);
                      return (
                        <>
                          <defs>
                            <path id={id} d={arcPathD(cx, cy, r, start, end)} fill="none" />
                          </defs>
                          <text class="orbit-label" style={`opacity:${atomConfig.labels?.idleOpacity ?? 0.35}`} font-size={atomConfig.labels?.fontSize}>
                            <textPath href={`#${id}`} startOffset="50%" text-anchor="middle">{display}</textPath>
                          </text>
                        </>
                      );
                    })()}
                  </g>
                ) : null}

							<!-- Shell orbit path -->
							<circle 
								class="shell"
								cx={atomConfig.viewport.centerX}
								cy={atomConfig.viewport.centerY}
								r={shell.radius}
								fill="none"
								stroke={shell.color}
								stroke-width={shell.strokeWidth}
								style={`opacity: ${userTweaks.shell.default.opacity}`}
								data-shell-index={shellIndex}
							/>
							
							<!-- Electrons on this shell -->
							{electronsInShell.map((project, electronIndex) => {
								const angleDegrees = electronPositions[electronIndex];
								const angleRadians = (angleDegrees * Math.PI) / 180; // Convert to radians for trig functions
								const x = atomConfig.viewport.centerX + shell.radius * Math.cos(angleRadians);
								const y = atomConfig.viewport.centerY + shell.radius * Math.sin(angleRadians);
								
								return (
									<circle 
										class="electron"
										cx={x}
										cy={y}
										r={atomConfig.electrons.radius}
										fill={atomConfig.electrons.color}
										stroke={atomConfig.electrons.color}
										stroke-width={atomConfig.electrons.strokeWidth}
										data-project={project.slug}
										data-shell={shellIndex}
										data-angle={angleDegrees}
									>
										<title>{project.data.title}</title>
									</circle>
								);
							})}
						</g>
					);
				})}
			</svg>
		</div>

        <!-- Client data payload for overlay -->
        <script type="application/json" id="project-data" set:html={JSON.stringify(projectSummaries)}></script>
        <script type="application/json" id="bio-data" set:html={JSON.stringify(bioPayload)}></script>
        <script type="application/json" id="logos-map" set:html={JSON.stringify(logosMap)}></script>

        <!-- Overlay (handles both projects and bio) -->
        <div id="project-overlay" aria-hidden="true">
          <button id="overlay-close" class="close-btn" aria-label="Close">Ã</button>
          
          <!-- Project content template -->
          <div id="project-content" class="inner" role="dialog" aria-modal="true" aria-labelledby="overlay-title">
            <h1 id="overlay-title"></h1>
            <p id="overlay-desc"></p>
            <div id="overlay-tech" style="display:flex;gap:8px;flex-wrap:wrap;margin:12px 0 16px;"></div>
            <div id="overlay-actions" style="display:flex;gap:12px;margin:8px 0 0;"></div>
          </div>
          
          <!-- Bio content template (BW Pro, shared component) -->
          <div id="bio-content" role="dialog" aria-modal="true" aria-label="Bio" style="display:none;">
            <BioBW data={bioPayload} />
          </div>
        </div>

		<script>
			import { gsap } from 'gsap';
			import { Draggable } from 'gsap/Draggable';
			import { OrbitSystem } from '../atom/core/OrbitSystem.js';
			import atomConfig from '../atom.config.js';
			
			// Initialize orbit system when DOM is ready
			document.addEventListener('DOMContentLoaded', () => {
				console.log('Initializing Atom Portfolio...');
				console.log('GSAP version:', gsap.version);
				
				// Minimum distance system is working correctly!
				
				// Create and start orbit system
				const orbitSystem = new OrbitSystem(atomConfig);
				orbitSystem.init();
				orbitSystem.start();

            // Labels rotation setup
				const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
				let labelTweens = [];
				const labelTweenByShell = new Map();
				(function initLabelRotation(){
            				  try {
            				    if (!atomConfig.labels?.enabled) return;
            				    // Respect reduced motion only if labels.rotate.respectReducedMotion is true
            				    if (prefersReduced && (atomConfig.labels?.rotate?.respectReducedMotion === true)) return;
				    if (!atomConfig.labels?.rotate?.enabled) return;
                const mode = atomConfig.labels?.mode || 'ring';
                const rotors = document.querySelectorAll('.shell-label-rotor');
                let created = 0;
                rotors.forEach((rotor) => {
                  const shellIndex = parseInt(rotor.getAttribute('data-shell-index') || '0');
                  const dir = atomConfig.shells[shellIndex]?.direction ?? 1;
                  const speed = atomConfig.labels.rotate.speedsByShell?.[shellIndex] ?? 100; // seconds per revolution
                  let tween = null;
                  if (mode === 'ring') {
                    tween = gsap.to(rotor, {
                      rotation: `+=${360 * dir}`,
                      duration: speed,
                      ease: 'none',
                      repeat: -1,
                      svgOrigin: `${atomConfig.viewport.centerX} ${atomConfig.viewport.centerY}`
                    });
                  } else if (mode === 'orbiting') {
                    // orbiting mode: animate startOffset of the textPath along full circle
                    const tp = rotor.querySelector('textPath');
                    if (!tp) return;
                    const start = 0;
                    const end = dir >= 0 ? 100 : -100;
                    const state = { p: start };
                    tween = gsap.to(state, {
                      p: end,
                      duration: speed,
                      ease: 'none',
                      repeat: -1,
                      onUpdate: () => {
                        const v = ((state.p % 100) + 100) % 100;
                        tp.setAttribute('startOffset', v + '%');
                      }
                    });
                  } else if (mode === 'ringPattern') {
                    // Static pattern: no tween
                    tween = null;
                  }
                  if (tween) {
                    labelTweens.push(tween);
                    labelTweenByShell.set(shellIndex, tween);
                    created++;
                  }
                });
            				    console.log(`[labels] mode=${mode} rotors=${rotors.length} tweens=${created} reduced=${prefersReduced}`);
				  } catch(e) { console.warn('Label rotation init failed', e); }
				})();

				function pauseLabelRotation() { try { labelTweens.forEach(t => t?.pause()); } catch {} }
				function resumeLabelRotation() {
				  try {
				    if (prefersReduced && atomConfig.motion?.respectReducedMotion) return;
				    labelTweens.forEach(t => t?.resume());
				  } catch {}
				}

				// Base viewBox size used for hitbox math (no CSS transform scaling)
				const baseW = atomConfig.viewport.width;
				const baseH = atomConfig.viewport.height;
				
			// Register GSAP Draggable
			gsap.registerPlugin(Draggable);

            // Overlay state and helpers
            const overlay = document.getElementById('project-overlay');
            const closeBtn = document.getElementById('overlay-close');
            
            // Project overlay elements
            const projectContent = document.getElementById('project-content');
            const titleEl = document.getElementById('overlay-title');
            const descEl = document.getElementById('overlay-desc');
            const techEl = document.getElementById('overlay-tech');
            const actionsEl = document.getElementById('overlay-actions');
            
            // Bio overlay elements (BW Pro)
            const bioContent = document.getElementById('bio-content');
            const bioNameEl = document.getElementById('bio-bw-name');
            const bioTitleEl = document.getElementById('bio-bw-subtitle');
            const bioLeadEl = document.getElementById('bio-bw-lead');
            const bioPortraitEl = document.getElementById('bio-bw-portrait');
            const bioSkillsGrid = document.getElementById('bio-bw-skills');
            const bioEmailEl = document.getElementById('bio-bw-email');
            const bioSocialEl = document.getElementById('bio-bw-social');
            
            // Data
            const projectDataEl = document.getElementById('project-data');
            const bioDataEl = document.getElementById('bio-data');
            const logosMapEl = document.getElementById('logos-map');
            const PROJECTS = projectDataEl ? JSON.parse(projectDataEl.textContent) : [];
            const BIO_DATA = bioDataEl ? JSON.parse(bioDataEl.textContent) : {};
            const LOGOS = logosMapEl ? JSON.parse(logosMapEl.textContent) : {};
            const projectBySlug = new Map(PROJECTS.map(p => [p.slug, p]));
            
            let overlayOpen = false;
            let overlayR = 0;
            let lastFocused = null;
            let currentElectron = null;
            let currentOverlayType = null; // 'project' or 'bio'

            function getCoverRadius(x, y) {
              const vw = window.innerWidth, vh = window.innerHeight;
              const dx = Math.max(x, vw - x);
              const dy = Math.max(y, vh - y);
              return Math.hypot(dx, dy);
            }

            function fillProjectOverlay(p) {
              titleEl.textContent = p.title || '';
              descEl.textContent = p.description || '';
              techEl.innerHTML = '';
              if (Array.isArray(p.tech)) {
                p.tech.forEach(t => {
                  const span = document.createElement('span');
                  span.textContent = t;
                  span.style.border = '1px solid #000';
                  span.style.padding = '2px 8px';
                  span.style.borderRadius = '999px';
                  span.style.fontSize = '12px';
                  techEl.appendChild(span);
                });
              }
              actionsEl.innerHTML = '';
              if (p.link) {
                const a = document.createElement('a'); a.href = p.link; a.target = '_blank'; a.rel='noreferrer noopener'; a.textContent = 'Live'; a.style.borderBottom='1px solid #000'; a.style.textDecoration='none'; actionsEl.appendChild(a);
              }
              if (p.github) {
                const a = document.createElement('a'); a.href = p.github; a.target = '_blank'; a.rel='noreferrer noopener'; a.textContent = 'GitHub'; a.style.borderBottom='1px solid #000'; a.style.textDecoration='none'; actionsEl.appendChild(a);
              }
            }

            function fillBioOverlay(bio) {
              // Only update text and image fields to avoid DOM drift vs /bio component
              bioNameEl.textContent = (bio?.title ? String(bio.title) : '').toUpperCase();
              bioTitleEl.textContent = (bio?.subtitle ? String(bio.subtitle) : '').toUpperCase();
              bioLeadEl.innerHTML = bio?.bio || '';
              bioPortraitEl.src = bio?.portrait || '';
              bioPortraitEl.alt = bio?.title || 'Portrait';
              bioEmailEl.href = bio?.email ? `mailto:${bio.email}` : '#';
              bioEmailEl.textContent = bio?.email || '';
            }

            function openProjectOverlay(slug, cx, cy, electronEl) {
              const p = projectBySlug.get(slug);
              if (!p || overlayOpen) return;
              
              currentOverlayType = 'project';
              overlayOpen = true;
              lastFocused = document.activeElement;
              currentElectron = electronEl;
              if (currentElectron) orbitSystem.pauseElectron(currentElectron);
              pauseLabelRotation();

              // Show project content, hide bio content
              projectContent.style.display = 'block';
              bioContent.style.display = 'none';
              
              fillProjectOverlay(p);
              overlay.style.setProperty('--x', `${cx}px`);
              overlay.style.setProperty('--y', `${cy}px`);
              overlay.style.setProperty('--r', `0px`);
              // Apply soft edge for project open
              try {
                const soft = (atomConfig.navTransition?.edgeSoftnessPx ?? 0);
                overlay.style.setProperty('--soft', `${soft}px`);
              } catch {}
              overlay.style.display = 'block';
              overlay.setAttribute('aria-hidden', 'false');
              const R = getCoverRadius(cx, cy);
              const useNav = !!(atomConfig.navTransition?.enabled);
              const dur = ((useNav ? atomConfig.navTransition?.inMs : atomConfig.overlayTransition?.openMs) ?? 600) / 1000;
              const easeOpen = (useNav ? atomConfig.navTransition?.easing : atomConfig.overlayTransition?.easing) ?? 'power2.inOut';
              const state = { r: 0 };
              gsap.to(state, {
                r: R,
                duration: dur,
                ease: easeOpen,
                onUpdate: function () {
                  overlayR = state.r;
                  overlay.style.setProperty('--r', `${overlayR}px`);
                  // Block input during early phase
                  if (atomConfig.navTransition?.blockInput) {
                    const p = this.progress();
                    overlay.style.pointerEvents = p < 0.85 ? 'none' : 'auto';
                  }
                },
                onComplete: () => {
                  overlay.classList.add('open');
                  overlay.style.pointerEvents = 'auto';
                  try { history.pushState({ overlay: true, slug }, '', `/projects/${slug}`); } catch {}
                  closeBtn.focus({ preventScroll: true });
                }
              });
            }

            async function openBioOverlay(cx, cy) {
              if (overlayOpen) return;
              
              currentOverlayType = 'bio';
              overlayOpen = true;
              lastFocused = document.activeElement;
              pauseLabelRotation();

              // Show bio content, hide project content
              projectContent.style.display = 'none';
              bioContent.style.display = 'block';
              
              // Fetch freshest bio data from API (fallback to inlined)
              let fresh = null;
              try {
                const res = await fetch('/api/bio.json?ts=' + Date.now(), { cache: 'no-store' });
                if (res.ok) fresh = await res.json();
              } catch {}
              fillBioOverlay(fresh || BIO_DATA || {});
              overlay.style.setProperty('--x', `${cx}px`);
              overlay.style.setProperty('--y', `${cy}px`);
              overlay.style.setProperty('--r', `0px`);
              // Apply soft edge for bio overlay (configurable)
              try {
                const soft = (atomConfig.overlayTransition?.edgeSoftnessPx ?? 0);
                overlay.style.setProperty('--soft', `${soft}px`);
              } catch {}
              overlay.style.display = 'block';
              overlay.setAttribute('aria-hidden', 'false');
              const R = getCoverRadius(cx, cy);
              const dur = (atomConfig.overlayTransition?.openMs ?? 600) / 1000;
              const state = { r: 0 };
              gsap.to(state, {
                r: R,
                duration: dur,
                ease: atomConfig.overlayTransition?.easing ?? 'power2.inOut',
                onUpdate: () => {
                  overlayR = state.r;
                  overlay.style.setProperty('--r', `${overlayR}px`);
                },
                onComplete: () => {
                  overlay.classList.add('open');
                  // Keep one-page feel; no route push for bio
                  closeBtn.focus({ preventScroll: true });
                }
              });
            }

            function closeOverlay() {
              if (!overlayOpen) return;
              overlayOpen = false;
              const useNav = currentOverlayType === 'project' && !!(atomConfig.navTransition?.enabled);
              const dur = ((useNav ? atomConfig.navTransition?.outMs : atomConfig.overlayTransition?.closeMs) ?? 520) / 1000;
              const easeClose = (useNav ? atomConfig.navTransition?.easing : atomConfig.overlayTransition?.easing) ?? 'power2.inOut';
              const state = { r: overlayR };
              overlay.classList.remove('open');
              gsap.to(state, {
                r: 0,
                duration: dur,
                ease: easeClose,
                onUpdate: () => {
                  overlayR = state.r;
                  overlay.style.setProperty('--r', `${overlayR}px`);
                },
                onComplete: () => {
                  overlay.style.display = 'none';
                  overlay.setAttribute('aria-hidden', 'true');
                  if (currentElectron) { orbitSystem.resumeElectron(currentElectron); currentElectron = null; }
                  resumeLabelRotation();
                  if (lastFocused) { try { lastFocused.focus({ preventScroll: true }); } catch {} }
                  try { history.replaceState(null, '', '/'); } catch {}
                }
              });
            }

            closeBtn?.addEventListener('click', () => closeOverlay());
            window.addEventListener('popstate', (e) => {
              // If overlay is open and we popped back, close it
              if (overlayOpen && !e.state?.overlay) {
                closeOverlay();
              }
            });
            document.addEventListener('keydown', (e) => {
              if (overlayOpen && e.key === 'Escape') {
                closeOverlay();
              }
            });
            // (Backdrop click and deep-link auto-open were removed per request)

                // Add hover effects to electrons (includes shell effects)
                const allElectrons = document.querySelectorAll('.electron'); // includes nucleus
                const electrons = document.querySelectorAll('.electron:not(.nucleus)'); // exclude nucleus from drag
                const shells = document.querySelectorAll('.shell');
                let dragLock = false; // Suppress hover logic while dragging
                const micro = atomConfig.micro || {};
                const svgNS = 'http://www.w3.org/2000/svg';
				
				// IMMEDIATE STATE MANAGER - No timeouts, no race conditions
				const hoverStateManager = {
					currentState: 'none', // 'none' | 'shell-N' | electron reference
					previousState: 'none',
					currentElectron: null, // Store actual electron element reference
					
					setState(newState, electronElement = null) {
						if (this.currentState === newState) return; // No change needed
						
						console.log(`ð¯ STATE CHANGE: ${this.currentState} â ${newState}`);
						this.previousState = this.currentState;
						this.currentState = newState;
						this.currentElectron = electronElement;
						this.applyStateChange();
					},
					
              applyStateChange() {
                // Immediately apply all visual changes
                this.exitPreviousState();
                this.enterCurrentState();
              },
					
              exitPreviousState() {
                if (this.previousState === 'none') return;
                
                // KILL ALL EXISTING ANIMATIONS IMMEDIATELY
                gsap.killTweensOf(shells);
                // Do not kill electron tweens; rely on overwrite for smooth transitions
                
                if (this.previousState.startsWith('shell-')) {
                  const shellIndex = parseInt(this.previousState.split('-')[1]);
                  this.resetShellEffects(shellIndex);
                } else if (this.previousState.startsWith('electron-')) {
                  const shellIndex = parseInt(this.previousState.split('-')[1]);
                  this.resetElectronEffects(shellIndex);
                }
              },
              
              enterCurrentState() {
              if (this.currentState === 'none') {
                // Reset opacity for all; radius only for non-nucleus electrons
                gsap.to(document.querySelectorAll('.electron'), {
                  opacity: 1.0,
                  duration: atomConfig.timing.baselineResetDuration,
                  ease: 'power2.out',
                  overwrite: 'auto'
                });
                gsap.to(document.querySelectorAll('.electron:not(.nucleus)'), {
                  attr: { r: atomConfig.electrons.radius },
                  duration: atomConfig.timing.baselineResetDuration,
                  ease: 'power2.out',
                  overwrite: 'auto'
                });
                // Reset labels to idle
                if (atomConfig.labels?.enabled) {
                  const allLabelTexts = document.querySelectorAll('.shell-label-rotor text');
                  gsap.to(allLabelTexts, {
                    opacity: atomConfig.labels?.idleOpacity ?? 0.35,
                    duration: atomConfig.timing.baselineResetDuration,
                    ease: 'power2.out',
                    overwrite: 'auto'
                  });
                }
                return;
              }
                
                if (this.currentState.startsWith('shell-')) {
                  const shellIndex = parseInt(this.currentState.split('-')[1]);
                  // Ensure electrons are at baseline when only shell is hovered
                  // Reset opacity for all; radius only for non-nucleus electrons
                  gsap.to(document.querySelectorAll('.electron'), {
                    opacity: 1.0,
                    duration: atomConfig.timing.hoverDuration,
                    ease: 'power2.out',
                    overwrite: 'auto'
                  });
                  gsap.to(document.querySelectorAll('.electron:not(.nucleus)'), {
                    attr: { r: atomConfig.electrons.radius },
                    duration: atomConfig.timing.hoverDuration,
                    ease: 'power2.out',
                    overwrite: 'auto'
                  });
                  this.applyShellEffects(shellIndex);
                  // Brighten label for this shell
                  if (atomConfig.labels?.enabled) {
                    const rotor = document.querySelector(`.shell-label-rotor[data-shell-index="${shellIndex}"]`);
                    if (rotor) {
                      gsap.to(rotor.querySelectorAll('text'), {
                        opacity: atomConfig.labels?.hoverOpacity ?? 0.7,
                        duration: atomConfig.timing.hoverDuration,
                        ease: 'power2.out',
                        overwrite: 'auto'
                      });
                    }
                  }
                } else if (this.currentState.startsWith('electron-')) {
                  const shellIndex = parseInt(this.currentState.split('-')[1]);
                  this.applyElectronEffects(shellIndex, this.currentElectron);
                  // Brighten label for this shell
                  if (atomConfig.labels?.enabled) {
                    const rotor = document.querySelector(`.shell-label-rotor[data-shell-index="${shellIndex}"]`);
                    if (rotor) {
                      gsap.to(rotor.querySelectorAll('text'), {
                        opacity: atomConfig.labels?.hoverOpacity ?? 0.7,
                        duration: atomConfig.timing.hoverDuration,
                        ease: 'power2.out',
                        overwrite: 'auto'
                      });
                    }
                  }
                }
              },
					
              applyShellEffects(shellIndex) {
                const shell = shells[shellIndex];
                const shellConfig = atomConfig.shells[shellIndex];
                if (!shell || !shellConfig) return;
                
                console.log(`ð¡ Applying shell ${shellIndex} effects`);
                gsap.to(shell, {
                  attr: { 'stroke-width': shellConfig.hoverStrokeWidth },
                  opacity: shellConfig.hoverOpacity,
                  duration: atomConfig.timing.hoverDuration, // Configurable
                  ease: 'power2.out'
                });
              },
					
              applyElectronEffects(shellIndex, electron) {
                const shell = shells[shellIndex];
                const shellConfig = atomConfig.shells[shellIndex];
                if (!shell || !shellConfig || !electron) return;
                
                console.log(`ð´ Applying electron effects for shell ${shellIndex}`);
                
                // Apply shell effects
                this.applyShellEffects(shellIndex);
                
                // Electron growth
                gsap.to(electron, {
                  attr: { r: atomConfig.electrons.hoverRadius },
                  duration: atomConfig.timing.hoverDuration,
                  ease: 'power2.out',
                  overwrite: 'auto'
                });
                
                // Motion pause
                orbitSystem.pauseShell(shellIndex);
                try { const t = labelTweenByShell.get(shellIndex); t && t.pause(); } catch {}
                
                // Global spotlight
                const allElectrons = document.querySelectorAll('.electron');
                allElectrons.forEach(e => {
                  if (e === electron) {
                    gsap.to(e, { opacity: 1.0, duration: atomConfig.timing.hoverDuration, ease: 'power2.out', overwrite: 'auto' });
                  } else {
                    gsap.to(e, { opacity: shellConfig.electronHoverOpacity, duration: atomConfig.timing.hoverDuration, ease: 'power2.out', overwrite: 'auto' });
                  }
                });
              },
					
              resetShellEffects(shellIndex) {
                const shell = shells[shellIndex];
                const shellConfig = atomConfig.shells[shellIndex];
                if (!shell || !shellConfig) return;
                
                console.log(`ð Resetting shell ${shellIndex} effects`);
                gsap.to(shell, {
                  attr: { 'stroke-width': shellConfig.strokeWidth },
                  opacity: shellConfig.defaultOpacity,
                  duration: atomConfig.timing.hoverDuration,
                  ease: 'power2.out'
                });
                // Dim label back to idle
                if (atomConfig.labels?.enabled) {
                  const rotor = document.querySelector(`.shell-label-rotor[data-shell-index="${shellIndex}"]`);
                  if (rotor) {
                    gsap.to(rotor.querySelectorAll('text'), {
                      opacity: atomConfig.labels?.idleOpacity ?? 0.35,
                      duration: atomConfig.timing.hoverDuration,
                      ease: 'power2.out',
                      overwrite: 'auto'
                    });
                  }
                }
              },
					
              resetElectronEffects(shellIndex) {
                console.log(`ð Resetting electron effects for shell ${shellIndex}`);
                
                // Reset shell
                this.resetShellEffects(shellIndex);
                
                // Resume motion
                orbitSystem.resumeShell(shellIndex);
                try {
                  const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
                  if (!(prefersReduced && atomConfig.motion?.respectReducedMotion)) {
                    const t = labelTweenByShell.get(shellIndex); t && t.resume();
                  }
                } catch {}
                
                // Reset all electrons
                // Opacity reset for all
                gsap.to(document.querySelectorAll('.electron'), {
                  opacity: 1.0,
                  duration: atomConfig.timing.hoverDuration,
                  ease: 'power2.out',
                  overwrite: 'auto'
                });
                // Radius reset only for non-nucleus electrons
                gsap.to(document.querySelectorAll('.electron:not(.nucleus)'), {
                  attr: { r: atomConfig.electrons.radius },
                  duration: atomConfig.timing.hoverDuration,
                  ease: 'power2.out',
                  overwrite: 'auto'
                });
                // Reset label to idle
                if (atomConfig.labels?.enabled) {
                  const rotor = document.querySelector(`.shell-label-rotor[data-shell-index="${shellIndex}"]`);
                  if (rotor) {
                    gsap.to(rotor.querySelectorAll('text'), {
                      opacity: atomConfig.labels?.idleOpacity ?? 0.35,
                      duration: atomConfig.timing.hoverDuration,
                      ease: 'power2.out',
                      overwrite: 'auto'
                    });
                  }
                }
              }
				};
				
				
				electrons.forEach((electron, electronIndex) => {
					const shellIndex = parseInt(electron.dataset.shell);
					
                electron.addEventListener('mouseenter', () => {
                    if (dragLock) return;
                    // Record electron event timing to prevent mousemove conflicts
                    lastElectronEventTime = performance.now();
                    // Pass the actual electron element to the state manager
                    hoverStateManager.setState(`electron-${shellIndex}-${electronIndex}`, electron);
                    // Micro: hover ring
                    try {
                      if (micro.hoverCursorRing) {
                        const parent = electron.parentNode;
                        const baseR = parseFloat(electron.getAttribute('r')) || 0;
                        const cx = parseFloat(electron.getAttribute('cx'));
                        const cy = parseFloat(electron.getAttribute('cy'));
                        const ring = document.createElementNS(svgNS, 'circle');
                        ring.setAttribute('cx', String(cx));
                        ring.setAttribute('cy', String(cy));
                        ring.setAttribute('r', String(baseR));
                        ring.setAttribute('fill', 'none');
                        ring.setAttribute('stroke', atomConfig.electrons.color || '#000');
                        ring.setAttribute('stroke-width', '1');
                        ring.style.pointerEvents = 'none';
                        // Align with electron transforms (paused on hover)
                        const tx = parseFloat(gsap.getProperty(electron, 'x')) || 0;
                        const ty = parseFloat(gsap.getProperty(electron, 'y')) || 0;
                        gsap.set(ring, { x: tx, y: ty, opacity: 0 });
                        parent.appendChild(ring);
                        // Animate outwards and hold
                        gsap.to(ring, {
                          attr: { r: baseR + (micro.hoverRingDelta ?? 6) },
                          opacity: micro.hoverRingOpacity ?? 0.6,
                          duration: (micro.hoverRingDurationMs ?? 160) / 1000,
                          ease: 'power2.out'
                        });
                        // Store ref for removal on leave
                        electron._hoverRing = ring;
                      }
                    } catch {}
                });
					
                electron.addEventListener('mouseleave', () => {
                    if (dragLock) return;
                    // Check if we're still in the shell's tolerance zone via distance calculation
                    // The mousemove handler will determine the correct next state
                    // For now, assume we're leaving completely (will be corrected by mousemove if needed)
                    hoverStateManager.setState('none');
                    // Micro: remove hover ring
                    try {
                      const ring = electron._hoverRing;
                      if (ring) {
                        gsap.to(ring, { opacity: 0, duration: 0.12, onComplete: () => { try { ring.remove(); } catch {} } });
                        electron._hoverRing = null;
                      }
                    } catch {}
                });

					// Minimal drag-and-drop (no tether visuals)
					let pressTime = 0;
					let maxTravel = 0;
					let startX = 0, startY = 0;
					Draggable.create(electron, {
						type: 'x,y',
						onPress: function () {
							dragLock = true;
							pressTime = performance.now();
							startX = parseFloat(gsap.getProperty(electron, 'x')) || 0;
							startY = parseFloat(gsap.getProperty(electron, 'y')) || 0;
							maxTravel = 0;
							// Pause only this electronâs motion
							orbitSystem.pauseElectron(electron);
						},
						onDrag: function () {
							const curX = parseFloat(gsap.getProperty(electron, 'x')) || 0;
							const curY = parseFloat(gsap.getProperty(electron, 'y')) || 0;
							const dx = curX - startX;
							const dy = curY - startY;
							const dist = Math.hypot(dx, dy);
							maxTravel = Math.max(maxTravel, dist);
						},
						onRelease: function () {
							const releaseTime = performance.now();
							const clickThresholdPx = 8;
							const clickThresholdMs = 180;
							const isClick = maxTravel < clickThresholdPx && (releaseTime - pressTime) < clickThresholdMs;
                    const snapBack = () => {
                        const amp = atomConfig.timing.dragElastic?.amplitude ?? 0.8;
                        const per = atomConfig.timing.dragElastic?.period ?? 0.25;
                        const elasticEase = `elastic.out(${amp}, ${per})`;
                        gsap.to(electron, {
                            x: startX,
                            y: startY,
                            duration: atomConfig.timing.dragSnapDuration ?? atomConfig.timing.hoverDuration,
                            ease: elasticEase,
                            onComplete: () => {
                                orbitSystem.resumeElectron(electron);
                                setTimeout(() => { dragLock = false; }, 80);
                            }
                        });
                    };
                    if (isClick) {
                        const rect = electron.getBoundingClientRect();
                        const cx = rect.left + rect.width / 2;
                        const cy = rect.top + rect.height / 2;
                        const slug = electron.getAttribute('data-project');
                        // Micro: ripple and shell pulse
                        try {
                          if (micro.ripple) {
                            const parent = electron.parentNode;
                            const baseR = parseFloat(electron.getAttribute('r')) || 0;
                            const cxAttr = parseFloat(electron.getAttribute('cx'));
                            const cyAttr = parseFloat(electron.getAttribute('cy'));
                            const ripple = document.createElementNS(svgNS, 'circle');
                            ripple.setAttribute('cx', String(cxAttr));
                            ripple.setAttribute('cy', String(cyAttr));
                            ripple.setAttribute('r', String(baseR));
                            ripple.setAttribute('fill', 'none');
                            ripple.setAttribute('stroke', micro.rippleColor || '#000');
                            ripple.setAttribute('stroke-width', String(micro.rippleStrokeWidth ?? 2));
                            ripple.style.pointerEvents = 'none';
                            const tx = parseFloat(gsap.getProperty(electron, 'x')) || 0;
                            const ty = parseFloat(gsap.getProperty(electron, 'y')) || 0;
                            gsap.set(ripple, { x: tx, y: ty, opacity: 0.8 });
                            parent.appendChild(ripple);
                            gsap.to(ripple, {
                              attr: { r: baseR + (micro.rippleExpandPx ?? 56) },
                              opacity: 0,
                              duration: (micro.rippleDurationMs ?? 360) / 1000,
                              ease: 'power2.out',
                              onComplete: () => { try { ripple.remove(); } catch {} }
                            });
                          }
                          if (micro.shellPulse) {
                            const shell = shells[shellIndex];
                            if (shell) {
                              const curW = parseFloat(shell.getAttribute('stroke-width')) || 0;
                              const target = curW + (micro.shellPulseDelta ?? 1.2);
                              gsap.to(shell, {
                                attr: { 'stroke-width': target },
                                duration: (micro.shellPulseDurationMs ?? 200) / 1000 / 2,
                                ease: 'power2.out',
                                yoyo: true,
                                repeat: 1
                              });
                            }
                          }
                          // Remove hover ring if present
                          if (electron._hoverRing) {
                            const ring = electron._hoverRing; electron._hoverRing = null;
                            gsap.to(ring, { opacity: 0, duration: 0.1, onComplete: () => { try { ring.remove(); } catch {} } });
                          }
                        } catch {}
                        openProjectOverlay(slug, cx, cy, electron);
                        setTimeout(() => { dragLock = false; }, 80);
                    } else {
                        // Drag release: snap back
                        snapBack();
                    }
						}
					});
				});

				// Nucleus hover: grow + global spotlight; click placeholder
				const nucleus = document.getElementById('nucleus-circle');
				if (nucleus) {
					nucleus.addEventListener('mouseenter', () => {
						if (dragLock) return;
						gsap.to(nucleus, {
							attr: { r: atomConfig.nucleus.hoverRadius },
							duration: atomConfig.timing.hoverDuration,
							ease: 'power2.out',
							overwrite: 'auto'
						});
						const dimOpacity = atomConfig.shells[0]?.electronHoverOpacity ?? 0.2;
						allElectrons.forEach(e => {
							if (e === nucleus) {
								gsap.to(e, { opacity: 1.0, duration: atomConfig.timing.hoverDuration, ease: 'power2.out', overwrite: 'auto' });
							} else {
								gsap.to(e, { opacity: dimOpacity, duration: atomConfig.timing.hoverDuration, ease: 'power2.out', overwrite: 'auto' });
							}
						});
					});
					nucleus.addEventListener('mouseleave', () => {
						gsap.to(nucleus, {
							attr: { r: atomConfig.nucleus.radius },
							duration: atomConfig.timing.hoverDuration,
							ease: 'power2.out',
							overwrite: 'auto'
						});
						allElectrons.forEach(e => {
							gsap.to(e, { opacity: 1.0, duration: atomConfig.timing.hoverDuration, ease: 'power2.out', overwrite: 'auto' });
						});
					});
					nucleus.addEventListener('click', () => {
                // Micro: ripple effect similar to electrons
                try {
                  if (micro.ripple) {
                    const parent = nucleus.parentNode;
                    const baseR = parseFloat(nucleus.getAttribute('r')) || 0;
                    const cxAttr = parseFloat(nucleus.getAttribute('cx'));
                    const cyAttr = parseFloat(nucleus.getAttribute('cy'));
                    const ripple = document.createElementNS(svgNS, 'circle');
                    ripple.setAttribute('cx', String(cxAttr));
                    ripple.setAttribute('cy', String(cyAttr));
                    ripple.setAttribute('r', String(baseR));
                    ripple.setAttribute('fill', 'none');
                    ripple.setAttribute('stroke', micro.rippleColor || '#000');
                    ripple.setAttribute('stroke-width', String(micro.rippleStrokeWidth ?? 2));
                    ripple.style.pointerEvents = 'none';
                    const tx = parseFloat(gsap.getProperty(nucleus, 'x')) || 0;
                    const ty = parseFloat(gsap.getProperty(nucleus, 'y')) || 0;
                    gsap.set(ripple, { x: tx, y: ty, opacity: 0.8 });
                    parent.appendChild(ripple);
                    gsap.to(ripple, {
                      attr: { r: baseR + (micro.rippleExpandPx ?? 56) },
                      opacity: 0,
                      duration: (micro.rippleDurationMs ?? 360) / 1000,
                      ease: 'power2.out',
                      onComplete: () => { try { ripple.remove(); } catch {} }
                    });
                  }
                } catch {}
                const rect = nucleus.getBoundingClientRect();
                const cx = rect.left + rect.width / 2;
                const cy = rect.top + rect.height / 2;
                openBioOverlay(cx, cy);
              });
				}
				
				// RAF-THROTTLED HITBOX SYSTEM - Optimized for performance
      const svgContainer = document.getElementById('atom-svg');
      const tolerance = atomConfig.hitbox?.tolerance ?? 15; // pixels - configurable via user-tweaks.js
				
				// Pre-calculate shell boundaries for performance (squared distances avoid Math.sqrt)
				const shellBoundaries = atomConfig.shells.map((shell, shellIndex) => ({
					innerBoundSquared: (shell.radius - tolerance) ** 2,
					outerBoundSquared: (shell.radius + tolerance) ** 2,
					shellIndex: shellIndex
				}));
				
				// RAF throttling variables
				let rafId = null;
				let pendingMousePosition = null;
				let lastElectronEventTime = 0;
				
				// Capture mouse position (high frequency)
				svgContainer.addEventListener('mousemove', (e) => {
					const rect = svgContainer.getBoundingClientRect();
					// Store only the LATEST mouse position (client coords)
					pendingMousePosition = { clientX: e.clientX, clientY: e.clientY, rectLeft: rect.left, rectTop: rect.top, rectWidth: rect.width, rectHeight: rect.height };
					
					// Schedule processing if not already scheduled (throttled to 60fps)
					if (!rafId) {
						rafId = requestAnimationFrame(processMousePosition);
					}
				});
				
				// Process mouse position (60fps max)
				function processMousePosition() {
					if (!pendingMousePosition) {
						rafId = null;
						return;
					}
					
					// Skip hover processing while dragging
					if (dragLock) {
						pendingMousePosition = null;
						rafId = null;
						return;
					}
					
					const rect = svgContainer.getBoundingClientRect();
					const viewW = baseW;
					const viewH = baseH;
					const scaleX = viewW / rect.width;
					const scaleY = viewH / rect.height;
					const mouseX = (pendingMousePosition.clientX - rect.left) * scaleX;
					const mouseY = (pendingMousePosition.clientY - rect.top) * scaleY;
					const centerX = viewW / 2;
					const centerY = viewH / 2;
					
					// Calculate SQUARED distance (faster - no Math.sqrt needed)
					const distanceSquared = (mouseX - centerX) ** 2 + (mouseY - centerY) ** 2;
					
					// Check which shell we're hovering (if any) using squared distances
					let hoveredShellIndex = null;
					for (let boundary of shellBoundaries) {
						if (distanceSquared >= boundary.innerBoundSquared && 
							distanceSquared <= boundary.outerBoundSquared) {
							hoveredShellIndex = boundary.shellIndex;
							console.log(`ð¯ HITBOX: Mouse in shell ${hoveredShellIndex} tolerance zone`);
							break; // Exit early when found
						}
					}
					
					// IMMEDIATE STATE CHANGES - No timeouts, no race conditions
					// Check if we should defer to recent electron events (prevents conflicts)
					const timeSinceElectronEvent = performance.now() - lastElectronEventTime;
					const shouldDeferToElectronEvent = timeSinceElectronEvent < 100; // 100ms grace period
					
					if (hoveredShellIndex !== null) {
						// Only update if we're not already in an electron state for this shell
						const currentElectronState = hoverStateManager.currentState.startsWith(`electron-${hoveredShellIndex}-`);
						if (!currentElectronState && !shouldDeferToElectronEvent) {
							hoverStateManager.setState(`shell-${hoveredShellIndex}`);
						}
					} else {
						// Not hovering any shell - go to none state (but respect recent electron events)
						if (!shouldDeferToElectronEvent) {
							hoverStateManager.setState('none');
						}
					}
					
					// Clear for next frame
					pendingMousePosition = null;
					rafId = null;
				}
				
				// Store reference globally for debugging
				window.orbitSystem = orbitSystem;
				
				console.log('ð PHASE 1+2 COMPLETE: Immediate State Manager + RAF Throttling');
				console.log(`Found ${electrons.length} electrons and ${shells.length} visual shells`);
				console.log(`ð® Optimized hitbox system: Â±${tolerance}px zones, 60fps max, squared distances`);
				console.log('ð¯ Features: Animation interruption, no timeouts, no race conditions');
			});
		</script>
	</body>
</html>
